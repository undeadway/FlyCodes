/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("﻿/**\r\n * FlyEditor 的主逻辑文件。\r\n * 对已经编码完成的输入进行解析最终输出可供显示的 HTML\r\n *\r\n * 内置了 UBB 解析和 HitOn 解析两种解析方式\r\n */\r\nconst util = __webpack_require__(/*! ./lib/util */ \"./src/lib/util.js\");\r\nconst HITON_STR = \"HitOn\", UBB_STR = \"UBB\";\r\n\r\nconst parsers = {\r\n\tubbcode: __webpack_require__(/*! ./lib/ubbcode */ \"./src/lib/ubbcode.js\"),\r\n\tHitOn: __webpack_require__(/*! ./lib/HitOn/ */ \"./src/lib/HitOn/index.js\")\r\n};\r\n\r\n// 这个代理的好处是，不用为每个不同的项目写一个对象，只要写 if/else 就可以了\r\nconst langProxy = new Proxy(parsers, {\r\n\tget: (target, key) => {\r\n\t\tif (String.startsWith(key, HITON_STR) && key !== HITON_STR) {\r\n\t\t\treturn __webpack_require__(\"./src/lib/HitOn/dist sync recursive ^\\\\.\\\\/.*$\")(\"./\" + key.split(\"_\")[1]); // 这里是为了保证 HitOn可以向前兼容\r\n\t\t} else {\r\n\t\t\treturn target[key];\r\n\t\t}\r\n\t}\r\n});\r\n\r\n// 代码解析用\r\nconst CODES_OBJ = {\r\n\tregexp: /```(.*[\\r\\n]+)((.|\\s)*?)```/,\r\n\tcode: \"$2\",\r\n\tname: \"$1\",\r\n\twithLang: (name, code) => {\r\n\t\tif (name) {\r\n\t\t\treturn \"```\" + name + code + \"```\";\r\n\t\t} else {\r\n\t\t\treturn \"```\" + code + \"```\";\r\n\t\t}\r\n\t}\r\n};\r\n\r\nconst basePlugIn = {\r\n\tubbcode: {\r\n\t\taspect: [\r\n\t\t\t{ // 代码\r\n\t\t\t\tmethod: parseCodes,\r\n\t\t\t\tobject: {\r\n\t\t\t\t\tregexp: /\\[code(=((.|\\s)*?))?\\]((.|\\s)*?)\\[\\/code\\]/,\r\n\t\t\t\t\tcode: \"$4\",\r\n\t\t\t\t\tname: \"$2\",\r\n\t\t\t\t\twithLang: (name, code) => {\r\n\t\t\t\t\t\tif (name) {\r\n\t\t\t\t\t\t\treturn `[code=${name}]${code}[/code]`;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn `[code]${code}[/code]`;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t//\tqueue: queues\r\n\t},\r\n\tHitOn: {\r\n\t\taspect: [\r\n\t\t\t{ // 代码\r\n\t\t\t\tmethod: parseCodes,\r\n\t\t\t\tobject: CODES_OBJ\r\n\t\t\t}\r\n\t\t],\r\n\t\t//\tqueue: queues\r\n\t}\r\n};\r\n\r\nlet highLighter = null;\r\n\r\nfunction getPlugIn(name) {\r\n\tif (String.startsWith(name, HITON_STR)) {\r\n\t\tname = HITON_STR;\r\n\t}\r\n\treturn basePlugIn[name];\r\n}\r\n\r\nfunction parseCodes(arg) {\r\n\r\n\tlet codes = util.AspectBase('codes');\r\n\tcodes.before = input => {\r\n\t\tif (highLighter) {\r\n\t\t\twhile (arg.regexp.test(input)) {\r\n\r\n\t\t\t\tlet name = RegExp[arg.name];\r\n\t\t\t\tlet code = RegExp[arg.code];\r\n\t\t\t\tlet codeWithLang = arg.withLang(name, code);\r\n\r\n\t\t\t\tlet outCode = highLighter(code, name);\r\n\t\t\t\tinput = codes.replace(input, codeWithLang, outCode);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn input;\r\n\t};\r\n\r\n\treturn codes;\r\n}\r\n\r\nfunction addPlugIn(adds, lang) {\r\n\tlet p = basePlugIn[lang];\r\n\r\n\tp.aspect = p.aspect || [];\r\n\tp.queue = p.queue || [];\r\n\tp.object = p.object || [];\r\n\r\n\tif (adds.aspect) {\r\n\t\tadds.aspect.map(item => {\r\n\t\t\tp.aspect.push(item);\r\n\t\t});\r\n\t}\r\n\tif (adds.queue) {\r\n\t\tadds.queue.map(item => {\r\n\t\t\tp.queue.push(item);\r\n\t\t});\r\n\t}\r\n\tif (adds.object) {\r\n\t\tadds.object.map(item => {\r\n\t\t\tp.object.push(item);\r\n\t\t});\r\n\t}\r\n}\r\n\r\nCoralian.setToGlobal(\"FlyCodes\", {\r\n\tlang: {\r\n\t\tHITON: HITON_STR,\r\n\t\tUBB: UBB_STR\r\n\t},\r\n\tsetHighLighter: (input) => {\r\n\t\thighLighter = input;\r\n\t},\r\n\taddPlugIn: (adds, lang) => {\r\n\r\n\t\tif (lang) {\r\n\t\t\taddPlugIn(adds, lang);\r\n\t\t} else {\r\n\t\t\tlet langs = Object.keys(basePlugIn);\r\n\t\t\tfor (let _lang of langs) {\r\n\t\t\t\taddPlugIn(adds, _lang);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t},\r\n\ttoHTML: (src, name) => {\r\n\r\n\t\tif (!name) return src;\r\n\r\n\t\tif (name === 'UBB') {\r\n\t\t\tname = 'ubbcode';\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tsrc = src.replace(/\\r\\n/g, \"\\n\"); // 把 \\r 给全部去掉，免得出现各种奇怪的东西\r\n\t\t\tsrc = src.replace(/\\r/g, \"\\n\");\r\n\t\t\tlet parse = langProxy[name];\r\n\t\t\treturn parse.toHTML(src, getPlugIn(name));\r\n\t\t} catch (e) {\r\n\t\t\tCoralian.logger.err(e);\r\n\t\t\treturn `<pre>${src}</pre>`;\r\n\t\t}\r\n\t},\r\n\t/*\r\n\t * 因为页面上需要点击下载，所以ED2K算是一个独立的组成，这里单独给出相关方法供调用\r\n\t * 但如何解析 ED2K，依然交由各个语言自己实现\r\n\t */\r\n\ted2k: {\r\n\t\tchange: function (index) {\r\n\t\t\tvar ed2k = document.getElementById('ed2k_' + index);\r\n\t\t},\r\n\t\tdownloadSelected: function (index) {\r\n\t\t\tvar ed2k = document.getElementById('ed2k_' + index);\r\n\t\t},\r\n\t\tselectAll: function () {\r\n\t\t}\r\n\t}\r\n});\r\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/lib/HitOn/dist sync recursive ^\\.\\/.*$":
/*!******************************************!*\
  !*** ./src/lib/HitOn/dist sync ^\.\/.*$ ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var map = {\n\t\"./0.0.0\": \"./src/lib/HitOn/dist/0.0.0.js\",\n\t\"./0.0.0.js\": \"./src/lib/HitOn/dist/0.0.0.js\",\n\t\"./0.0.1\": \"./src/lib/HitOn/dist/0.0.1.js\",\n\t\"./0.0.1.js\": \"./src/lib/HitOn/dist/0.0.1.js\",\n\t\"./plugin\": \"./src/lib/HitOn/dist/plugin.js\",\n\t\"./plugin.js\": \"./src/lib/HitOn/dist/plugin.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./src/lib/HitOn/dist sync recursive ^\\\\.\\\\/.*$\";\n\n//# sourceURL=webpack:///./src/lib/HitOn/dist_sync_^\\.\\/.*$?");

/***/ }),

/***/ "./src/lib/HitOn/dist/0.0.0.js":
/*!*************************************!*\
  !*** ./src/lib/HitOn/dist/0.0.0.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("﻿/**\r\n * FlyEditor 的主逻辑文件。\r\n * 对已经编码完成的输入进行解析最终输出可供显示的 HTML\r\n *\r\n * 内置了 UBB 解析和 HitOn 解析两种解析方式\r\n *\r\n * 文件解析的接口中只定义了\r\n * toHTML\r\n * clear\r\n */\r\nvar newXmlWrapper = Coralian.dom.newXmlWrapper;\r\nvar isNumber = Number.isNumber,\r\n\tformatFileSize = Coralian.Formatter.formatFileSize;\r\nlet getPlugIn = __webpack_require__(/*! ./plugin */ \"./src/lib/HitOn/dist/plugin.js\");\r\n\r\nfunction replacePhonics(str, regexp, startTag, endTag) {\r\n\r\n\twhile (regexp.test(str)) {\r\n\r\n\t\tvar inner = RegExp.$1;\r\n\t\tvar input = startTag + inner + endTag;\r\n\r\n\t\tinner = inner.replace(/\\(/g, \"<rp>(</rp><rt>\");\r\n\t\tinner = inner.replace(/\\)/g, \"</rt><rp>)</rp>\");\r\n\r\n\t\tvar output = '<ruby>' + inner + '</ruby>';\r\n\r\n\t\tstr = str.replace(input, output);\r\n\t}\r\n\r\n\treturn str;\r\n}\r\n\r\nfunction replaceURI(str) {\r\n\t// 最后的转义出处理\r\n\ttry {\r\n\t\tstr = decodeURIComponent(str);\r\n\t} catch (e) {\r\n\t\t// 如果出错，就当不存在\r\n\t}\r\n\r\n\treturn str;\r\n}\r\n\r\nfunction escapseED2K(ed2kStart, ed2kEnd) {\r\n\r\n\tvar ed2kIndex = 0;\r\n\r\n\tfunction __escapseED2K(str) {\r\n\r\n\t\t// 解析出 [ed2k] [/ed2k] 的结构\r\n\t\tvar start = str.indexOf(ed2kStart);\r\n\t\tvar end = str.indexOf(ed2kEnd);\r\n\r\n\t\tif (start < 0) return str; // decodeURI(str);\r\n\t\tif (end < 0) ed2KError();\r\n\r\n\t\tvar box = newXmlWrapper('fieldset', {\r\n\t\t\t\"class\": \"fieldset ed2k_box\"\r\n\t\t}).add(newXmlWrapper(\"legend\").add(\"ED2K资源\"));\r\n\t\t// 分割 [ed2k] [/ed2k] 中间的字符串为数组\r\n\t\tvar title = newXmlWrapper(\"ul\", {\r\n\t\t\t'class': 'ed2k_title'\r\n\t\t}).add(newXmlWrapper('li', {\r\n\t\t\t'class': 'ed2k_cb'\r\n\t\t}).add(\"选择\")).add(newXmlWrapper(\"li\", {\r\n\t\t\t'class': 'ed2k_name'\r\n\t\t}).add(\"资源名称\")).add(newXmlWrapper(\"li\", {\r\n\t\t\t'class': 'ed2k_size'\r\n\t\t}).add(\"资源大小\"));\r\n\t\tvar div = newXmlWrapper('div');\r\n\t\tbox.add(div);\r\n\t\tdiv.add(title);\r\n\t\tvar ed2ks = str.slice(start + 6, end).split('<br />');\r\n\t\tfor (var i = 0, len = ed2ks.length; i < len; i++) {\r\n\t\t\tvar ed2k = ed2ks[i];\r\n\t\t\tif (!String.isEmpty(String.trim(ed2k))) {\r\n\t\t\t\t// 以 | 为单位分割行，并判断每一行是否符合 ED2K 协议，不符合则直接显示原内容\r\n\t\t\t\tvar ed2kElement = ed2k.split('|');\r\n\t\t\t\t// 符合 ED2K 协议的情况下，解析ED2K 相关部分，并显示内容到页面上\r\n\t\t\t\t// 关于 ED2K 协议参考：http://zh.wikipedia.org/wiki/ED2k%E9%93%BE%E6%8E%A5\r\n\t\t\t\tif (ed2kElement[0] !== 'ed2k://') {\r\n\t\t\t\t\ted2KError();\r\n\t\t\t\t}\r\n\t\t\t\tvar type = ed2kElement[1];\r\n\t\t\t\tvar line = newXmlWrapper('ul', {\r\n\t\t\t\t\t'class': 'ed2k_line'\r\n\t\t\t\t}).add(newXmlWrapper('li', {\r\n\t\t\t\t\t'class': 'ed2k_cb'\r\n\t\t\t\t}).add(newXmlWrapper('input', {\r\n\t\t\t\t\ttype: 'checkbox',\r\n\t\t\t\t\tname: 'ed2k_' + ed2kIndex,\r\n\t\t\t\t\tvalue: ed2k\r\n\t\t\t\t})));\r\n\t\t\t\tswitch (type) {\r\n\t\t\t\t\tcase 'file':\r\n\t\t\t\t\t\tvar name = decodeURI(ed2kElement[2]);\r\n\t\t\t\t\t\tvar size = ed2kElement[3],\r\n\t\t\t\t\t\t\thash = ed2kElement[4];\r\n\r\n\t\t\t\t\t\tif (!isNumber(size) || !isNumber(hash, Number.HEX)) {\r\n\t\t\t\t\t\t\ted2KError();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tline.putAttribute('title', name);\r\n\r\n\t\t\t\t\t\tvar showName = newXmlWrapper('li', {\r\n\t\t\t\t\t\t\t'class': 'ed2k_name',\r\n\t\t\t\t\t\t\ttitle: name\r\n\t\t\t\t\t\t}).add(newXmlWrapper('a', {\r\n\t\t\t\t\t\t\thref: ed2k\r\n\t\t\t\t\t\t}).add(name));\r\n\t\t\t\t\t\tvar showSize = newXmlWrapper('li', {\r\n\t\t\t\t\t\t\t'class': 'ed2k_size'\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tshowSize.add(formatFileSize(size));\r\n\t\t\t\t\t\tline.add(showName).add(showSize);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t// 其他链接模式暂时不实现\r\n\t\t\t\t\t/* case 'server':\r\n\t\t\t\t\t\tbreak; */\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\ted2KError();\r\n\t\t\t\t}\r\n\t\t\t\tdiv.add(line);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tbox.add(newXmlWrapper('div', {\r\n\t\t\t'class': 'ed2k_dl_div'\r\n\t\t}).add(newXmlWrapper('input', {\r\n\t\t\ttype: 'checkbox',\r\n\t\t\tname: 'ed2k_' + ed2kIndex,\r\n\t\t\tonchange: 'NameBridge.codes.ed2k.change(' + ed2kIndex + ')'\r\n\t\t})).add('全选/全不选').add(newXmlWrapper('input', { // TODO 相关操作未实现\r\n\t\t\ttype: 'button',\r\n\t\t\t'class': 'ed2k_dl_button',\r\n\t\t\tvalue: '下载选中的连接',\r\n\t\t\tonclick: 'NameBridge.codes.ed2k.downloadSelected(' + ed2kIndex + ')'\r\n\t\t})));\r\n\r\n\t\ted2kIndex++;\r\n\r\n\t\tstr = decodeURI(str.slice(0, start)) + box.toString() + str.slice(end + 7);\r\n\r\n\t\t// 递归查找下一处\r\n\t\treturn __escapseED2K(str);\r\n\t};\r\n\r\n\treturn __escapseED2K;\r\n};\r\n\r\nfunction replacePre(preArg) {\r\n\tvar source = [];\r\n\treturn {\r\n\t\tbefore: function (str) {\r\n\t\t\twhile (preArg.PRE_REGEXP.test(str)) {\r\n\t\t\t\tvar inner = RegExp.$1;\r\n\t\t\t\tstr = str.replace(preArg.PRE_START_TAG + inner + preArg.PRE_END_TAG, \"{pre\" + source.length + \"}\");\r\n\t\t\t\tsource.push('<pre class=\"pre\">' + inner + '</pre>');\r\n\t\t\t}\r\n\r\n\t\t\treturn str;\r\n\t\t},\r\n\t\tafter: function (str) {\r\n\r\n\t\t\tObject.forEach(source, function (i, src) {\r\n\t\t\t\tstr = str.replace(\"{pre\" + i + \"}\", src);\r\n\t\t\t});\r\n\r\n\t\t\treturn str;\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction defaultReplaceFace(str) {\r\n\r\n\tfor (var i = 0, len = FACE_NAME.length; i < len; i++) {\r\n\t\tvar name = FACE_NAME[i];\r\n\t\tvar regExp = new RegExp(\"\\\\[\" + name + \"\\\\]\", \"g\");\r\n\t\tif (regExp.test(str)) {\r\n\t\t\tstr = str.replace(regExp, '<img src=\"/res/flies/face/' + (100 + i) + '.gif\" title=\"' + name +\r\n\t\t\t\t'\" />');\r\n\t\t}\r\n\t}\r\n\r\n\treturn str;\r\n\r\n}\r\n\r\n// 从名称到代码\r\nvar FONT_NAMES = {\r\n\t'宋体': 'song',\r\n\t'仿宋': 'fsong',\r\n\t'楷体': 'kai',\r\n\t'魏碑': 'weibei',\r\n\t'隶书': 'lishu',\r\n\t'黑体': 'hei',\r\n\t'Arial': 'arial',\r\n\t'Courier New': 'couriernew',\r\n\t'MS PGothic': 'mspgothic',\r\n\t'MS PMincho': 'mspmincho',\r\n\t'Tahoma': 'tahoma',\r\n\t'Times New Roman': 'timesnewroman'\r\n};\r\n\r\nvar FACE_NAME = ['黑线', '怒', '眼泪', '炸毛', '蛋定', '微笑', '汗', '囧', '卧槽', '坏笑', '鼻血', '大姨妈', '瞪眼', '你说啥', '一脸血', '害羞',\r\n\t'大好', '喝茶看戏', '美～', '笑岔', '中箭', '呕', '撇嘴', '碎掉', '吐舌头', '纳尼', '泪流满面', '升仙', '扭曲', '闪闪亮', '山', '寨', '基',\r\n\t'惊', '头顶青天', '不错', '吃屎', '牛', '严肃', '作死', '帅' /*, '僵尸', '吸血鬼', '喵'*/, '腹黑', '喜闻乐见', '呵呵呵', '！', '？', '吓尿了',\r\n\t'嘁', '闪电', \"S1\", \"战斗力爆表\", \"贼笑\", \"嗯...\", \"喵\", \"奸笑\"\r\n];\r\n\r\nfunction ed2KError() {\r\n\tthrow new Error(\"ED2K链接的格式不正确\");\r\n}\r\n\r\nfunction hitOn() {\r\n\r\n\tvar preArg = {\r\n\t\tPRE_REGEXP: /\\[\\[((.|\\s)*?)\\]\\]/,\r\n\t\tPRE_START_TAG: '[[',\r\n\t\tPRE_END_TAG: ']]'\r\n\t};\r\n\r\n\tfunction replaceEscapeSequence() {\r\n\t\tvar escapeSequences = [];\r\n\t\treturn {\r\n\t\t\tbefore: function (input) {\r\n\t\t\t\twhile (ES_REGEXP.test(input)) {\r\n\t\t\t\t\tinput = input.replace(ES_REGEXP, '{backslash' + escapeSequences.length + '}');\r\n\t\t\t\t\tescapeSequences.push(RegExp.$1);\r\n\t\t\t\t}\r\n\t\t\t\treturn input;\r\n\t\t\t},\r\n\t\t\tafter: function (input) {\r\n\t\t\t\tObject.forEach(escapeSequences, function (i, obj) {\r\n\t\t\t\t\tinput = input.replace(new RegExp('\\\\{backslash' + i + '\\\\}', 'g'), obj);\r\n\t\t\t\t});\r\n\t\t\t\treturn input;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tvar replaceTable = (function () {\r\n\r\n\t\tconst TABLE_REGEX = /(\\|(.)+\\|\\n)+/,\r\n\t\t\tREP_TD = /\\<td\\>\\n\\<\\/td\\>/g;\r\n\t\tVERTICAL_BAR = /\\|/g;\r\n\r\n\t\tconst TR_JOIN = \"</tr><tr>\",\r\n\t\t\tTD_JOIN = \"</td><td>\",\r\n\t\t\tTABLE_START = '<table class=\"table\"><tr>',\r\n\t\t\tTABLE_END = '</tr></table>';\r\n\r\n\t\treturn function (input) {\r\n\r\n\t\t\twhile ((matches = input.match(TABLE_REGEX)) !== null) {\r\n\t\t\t\tlet part = matches[0];\r\n\t\t\t\tlet output = part.replace(VERTICAL_BAR, TD_JOIN);\r\n\t\t\t\toutput = output.replace(REP_TD, TR_JOIN);\r\n\t\t\t\toutput = TABLE_START + output.slice(5, output.length - 5) + TABLE_END;\r\n\r\n\t\t\t\tinput = input.replace(part, output);\r\n\t\t\t}\r\n\r\n\t\t\treturn input;\r\n\t\t}\r\n\r\n\t})();\r\n\r\n\tvar replaceList = (function () {\r\n\r\n\t\tconst UL_REGEX = /(\\*+\\. (.)+\\n)+/,\r\n\t\t\tOL_1_REGEX = /([0-9]+\\. (.)+\\n)+/,\r\n\t\t\tOL_A_REGEX = /([a-z]+\\. (.)+\\n)+/,\r\n\t\t\tTYPE_1_LI_START = /[0-9]+\\. /g,\r\n\t\t\tTYPE_A_LI_START = /[a-z]+\\. /g,\r\n\t\t\tUL_LI_START = /\\*+\\. /g,\r\n\t\t\tLI_END = /\\n/g;\r\n\r\n\t\tconst LI_START_TAG = \"<li>\",\r\n\t\t\tLI_END_TAG = \"</li>\",\r\n\t\t\tUL_START_TAG = \"<ul>\",\r\n\t\t\tUL_END_TAG = \"</ul>\",\r\n\t\t\tOL_START_TYPE_1_TAG = '<ol class=\"list_type_1\">',\r\n\t\t\tOL_START_TYPE_A_TAG = '<ol class=\"list_type_a\">',\r\n\t\t\tOL_END_TAG = \"</ol>\";\r\n\r\n\t\tfunction replace(input, part, liStart, startTag, endTag) {\r\n\r\n\t\t\tvar output = part.replace(liStart, LI_START_TAG);\r\n\t\t\toutput = output.replace(LI_END, LI_END_TAG);\r\n\r\n\t\t\treturn input.replace(part, startTag + output + endTag);\r\n\t\t}\r\n\r\n\t\treturn function (input) {\r\n\r\n\t\t\t// ul\r\n\t\t\twhile ((matches = input.match(UL_REGEX)) !== null) {\r\n\t\t\t\tinput = replace(input, matches[0], UL_LI_START, UL_START_TAG, UL_END_TAG);\r\n\t\t\t}\r\n\t\t\t// ol -1\r\n\t\t\twhile ((matches = input.match(OL_1_REGEX)) !== null) {\r\n\t\t\t\tinput = replace(input, matches[0], TYPE_1_LI_START, OL_START_TYPE_1_TAG, OL_END_TAG);\r\n\t\t\t}\r\n\t\t\t// ol -a\r\n\t\t\twhile ((matches = input.match(OL_A_REGEX)) !== null) {\r\n\t\t\t\tinput = replace(input, matches[0], TYPE_A_LI_START, OL_START_TYPE_A_TAG, OL_END_TAG);\r\n\t\t\t}\r\n\r\n\t\t\treturn input;\r\n\t\t};\r\n\t})();\r\n\r\n\tvar ES_REGEXP = /\\\\(.)/;\r\n\tvar P_NEWLINE = /\\n{2,}/,\r\n\t\tP_NEWLINE_G = /\\n{2,}/g;\r\n\r\n\tfunction replaceP(input) {\r\n\t\tif (P_NEWLINE.test(input)) {\r\n\t\t\tinput = input.replace(P_NEWLINE, \"<p>\");\r\n\t\t\tif (P_NEWLINE.test(input)) {\r\n\t\t\t\tinput = input.replace(P_NEWLINE_G, \"</p><p>\");\r\n\t\t\t}\r\n\t\t\tinput += \"</p>\";\r\n\t\t}\r\n\t\tinput = input.replace(/\\<p\\>\\<\\/p\\>/g, '');\r\n\t\treturn input;\r\n\t}\r\n\r\n\tfunction replaceQuote(input) {\r\n\t\twhile (/\\n&gt;( (.|\\s)*?|)\\n((.|\\s)*?)(\\n{2}|$)/.test(input)) {\r\n\t\t\tvar legend = RegExp.$1 || '引用';\r\n\t\t\tvar txt = RegExp.$3;\r\n\t\t\tvar inner = '\\n&gt;' + RegExp.$1 + '\\n' + txt + RegExp.$5;\r\n\t\t\tvar outs = '<fieldset class=\"fieldset\"><legend>' + String.trim(legend) + '</legend>' + txt + '</fieldset>';\r\n\t\t\tinput = input.replace(inner, outs);\r\n\t\t}\r\n\t\treturn input;\r\n\t}\r\n\r\n\tfunction replaceColor(input) {\r\n\t\twhile (/\\[#([0-9,A-F]{6})\\|((.|\\s)*?)\\]/i.test(input)) {\r\n\t\t\tvar color = RegExp.$1,\r\n\t\t\t\tinner = RegExp.$2,\r\n\t\t\t\touts;\r\n\t\t\tvar splits = inner.split(\"|\");\r\n\t\t\tif (splits.length === 2) {\r\n\t\t\t\touts = '<span class=\"' + splits[0] + \"_\" + color + '\">' + splits[1] + '</span>';\r\n\t\t\t} else {\r\n\t\t\t\touts = '<span class=\"color_' + color + '\">' + splits[0] + '</span>';\r\n\t\t\t}\r\n\t\t\tinput = input.replace(\"[#\" + color + \"|\" + inner + \"]\", outs);\r\n\t\t}\r\n\t\treturn input;\r\n\t}\r\n\r\n\t/**\r\n\t * #(url | txt | title | target)\r\n\t *\r\n\t * @param {Object} input\r\n\t */\r\n\tfunction replaceLink(input) {\r\n\t\twhile (/#\\(((.|\\s)*?)\\)/.test(input)) {\r\n\t\t\tvar inner = RegExp.$1;\r\n\t\t\tvar splits = inner.split(\"|\");\r\n\t\t\tvar url = splits[0]\r\n\t\t\tvar outs = '<a href=\"' + url + '\"';\r\n\t\t\touts += ' title=\"' + (splits.length === 4 ? (splits[2] || url) : url) + '\"';\r\n\r\n\t\t\tvar target = splits[splits.length === 4 ? 3 : 2];\r\n\t\t\tif (target) {\r\n\t\t\t\touts += ' target=\"_' + target + '\"';\r\n\t\t\t}\r\n\t\t\touts += '>';\r\n\t\t\touts += splits[1] || url;\r\n\t\t\touts += '</a>';\r\n\t\t\touts = outs.replace(/<\\/?em>/g, \"/\");\r\n\r\n\t\t\tinput = input.replace(\"#(\" + inner + \")\", outs);\r\n\t\t}\r\n\t\treturn input;\r\n\t}\r\n\r\n\t/**\r\n\t *  $(url, title, width, height)\r\n\t *\r\n\t * @param {Object} input\r\n\t */\r\n\tfunction replaceImg(input) {\r\n\t\twhile (/\\$\\(((.|\\s)*?)\\)/.test(input)) {\r\n\t\t\tvar inner = RegExp.$1;\r\n\t\t\tvar splits = inner.split(\"|\");\r\n\t\t\tvar str = splits[0].replace(/<\\/?(em)>/g, \"/\");\r\n\t\t\tstr = str.replace(/<\\/?(ins)>/g, \"_\");\r\n\t\t\tstr = str.replace(/<\\/?(del)>/g, \"-\");\r\n\t\t\tvar outs = '<img src=\"' + str + '\"';\r\n\t\t\touts += ' title=\"' + (splits[1] || str) + '\"';\r\n\r\n\t\t\tif (splits[2]) {\r\n\t\t\t\touts += ' width=\"' + splits[2] + '\"';\r\n\t\t\t}\r\n\r\n\t\t\tif (splits[3]) {\r\n\t\t\t\touts += ' height=\"' + splits[3] + '\"';\r\n\t\t\t}\r\n\t\t\touts += ' onload=\"styles.Image.resize(this)\" onclick=\"styles.Image.protoSize(this)\" />';\r\n\r\n\t\t\tinput = input.replace(\"$(\" + inner + \")\", outs);\r\n\t\t}\r\n\t\treturn input;\r\n\t}\r\n\r\n\tfunction replaceSimpleLineCode() {\r\n\r\n\t\tvar lineCodes = [];\r\n\r\n\t\treturn {\r\n\t\t\tbefore: function (input) {\r\n\t\t\t\twhile (/`((.)*?)`/.test(input)) {\r\n\t\t\t\t\tlet obj = RegExp.$1;\r\n\t\t\t\t\tinput = input.replace(\"`\" + obj + \"`\", \"[lineCode\" + lineCodes.length + \"]\");\r\n\t\t\t\t\tlineCodes.push(\"<code class=\\\"code\\\">\" + obj + \"</code>\");\r\n\t\t\t\t}\r\n\t\t\t\treturn input;\r\n\t\t\t},\r\n\t\t\tafter: function (input) {\r\n\t\t\t\tObject.forEach(lineCodes, function (i, obj) {\r\n\t\t\t\t\tinput = input.replace(new RegExp('\\\\[lineCode' + i + '\\\\]', 'g'), obj);\r\n\t\t\t\t});\r\n\t\t\t\treturn input;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\r\n\t\ttoHTML: function (str) {\r\n\r\n\t\t\tlet plugIns = getPlugIn();\r\n\r\n\t\t\tif (plugIns) {\r\n\t\t\t\tObject.forEach(plugIns, function (i, obj) {\r\n\t\t\t\t\tstr = obj.before(str);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tstr = str.replace(/</g, '&lt;');\r\n\t\t\tstr = str.replace(/>/g, '&gt;');\r\n\r\n\t\t\tstr = this.parse(str);\r\n\t\t\tstr = defaultReplaceFace(str);\r\n\r\n\t\t\t// 插件的后处理\r\n\t\t\tif (plugIns) {\r\n\t\t\t\tObject.forEach(plugIns, function (i, obj) {\r\n\t\t\t\t\tstr = obj.after(str);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// 后处理\r\n\t\t\tstr = str.replace(/\\<\\/(p|pre)\\>\\n/, \"</$1>\");\r\n\r\n\t\t\treturn replaceURI(str);\r\n\t\t},\r\n\t\tparse: function (input) {\r\n\r\n\t\t\tvar es = replaceEscapeSequence(); // 转义符号\r\n\t\t\tvar slc = replaceSimpleLineCode();\r\n\t\t\tinput = slc.before(input);\r\n\t\t\tinput = es.before(input);\r\n\r\n\t\t\tinput = input.replace(/\\/\\*((.|\\s)*?)\\*\\//g, ''); // 去掉注释\r\n\t\t\tinput = input.replace(/\\/((.|\\s){1,})\\//g, \"<em>$1</em>\"); // 斜体字\r\n\t\t\tinput = replaceQuote(input); // 引用\r\n\t\t\tinput = input.replace(/!((.|\\s)*?)!/g, \"<strong>$1</strong>\"); // 粗体字\r\n\t\t\tinput = input.replace(/\\[\\-:((.|\\s)*?)\\]/g, \"<input type=checkbox name=$1 />\"); // 未选中复选框\r\n\t\t\tinput = input.replace(/\\[\\+:((.|\\s)*?)\\]/g, \"<input type=checkbox checked=checked name=$1 />\"); // 选中的复选框\r\n\t\t\tinput = input.replace(/-((.|\\s)*?)-/g, \"<del>$1</del>\"); // 删除线\r\n\t\t\tinput = input.replace(/_((.|\\s)*?)_/g, \"<ins>$1</ins>\"); // 下划线\r\n\t\t\tinput = replaceList(input); // 列表\r\n\t\t\tinput = replaceTable(input); // 表格\r\n\r\n\t\t\tinput = input.replace(/\\n&gt;&gt;((.|\\s)+)&lt;&lt;\\n/g, '<div class=\"align_center\">$1</div>'); // 居中对齐\r\n\t\t\tinput = input.replace(/\\n\\|\\:((.|\\s)+)&lt;&lt;\\n/g, '<div align=\"align_left\">$1</div>'); // 左对齐\r\n\t\t\tinput = input.replace(/\\n&gt;&gt;((.|\\s)+)\\:\\|\\n/g, '<div align=\"align_right\">$1</div>'); // 右对齐\r\n\r\n\t\t\tinput = replacePhonics(input, /\\{\\{((.|\\s)*?)\\}\\}/, \"{{\", \"}}\"); // 注音\r\n\t\t\tinput = input.replace(/\\?\\(([1-9]([0-9]?)):((.|\\s)*?)\\)/, '<span class=\"size_$1\">$3</span>'); // 字号\r\n\r\n\t\t\tinput = replaceColor(input); // 颜色\r\n\t\t\tinput = replaceLink(input); // 链接\r\n\t\t\tinput = replaceImg(input); // 图像\r\n\r\n\t\t\tinput = input.replace(/###### (.*?)(\\n|$)/g, \"<h6 class=\\\"h6\\\">$1</h6>\"); // 六级标题\r\n\t\t\tinput = input.replace(/##### (.*?)(\\n|$)/g, \"<h5 class=\\\"h5\\\">$1</h5>\"); // 五级标题\r\n\t\t\tinput = input.replace(/#### (.*?)(\\n|$)/g, \"<h4 class=\\\"h4\\\">$1</h4>\"); // 四级标题\r\n\t\t\tinput = input.replace(/### (.*?)(\\n|$)/g, \"<h3 class=\\\"h3\\\">$1</h3>\"); // 三级标题\r\n\t\t\tinput = input.replace(/## (.*?)(\\n|$)/g, \"<h2 class=\\\"h2\\\">$1</h2>\"); // 二级标题\r\n\t\t\tinput = input.replace(/# (.*?)(\\n|$)/g, \"<h1 class=\\\"h1\\\">$1</h1>\"); // 一级标题\r\n\r\n\t\t\tvar pre = replacePre(preArg); // 预定义格式\r\n\t\t\tinput = pre.before(input);\r\n\r\n\t\t\tinput = replaceP(input); // 段落\r\n\r\n\t\t\tinput = input.replace(/\\n/g, \"<br />\"); // 单行换行\r\n\t\t\tinput = pre.after(input);\r\n\r\n\t\t\tinput = es.after(input);\r\n\t\t\tinput = slc.after(input);\r\n\r\n\t\t\treturn input;\r\n\t\t},\r\n\t\tclear: function (str) {\r\n\t\t\treturn str;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = hitOn();\n\n//# sourceURL=webpack:///./src/lib/HitOn/dist/0.0.0.js?");

/***/ }),

/***/ "./src/lib/HitOn/dist/0.0.1.js":
/*!*************************************!*\
  !*** ./src/lib/HitOn/dist/0.0.1.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\r\nconst MAIN_QUOT_REGX = /\\n(\\n(>(.*)\\n)+)/,\r\n\tNL_RT_ANGLE_GLOBAL_REGX = /\\n>/g;\r\nconst STRING_QUOTE = \"引用\";\r\n\r\nfunction replaceQuote(input) {\r\n\r\n\twhile (MAIN_QUOT_REGX.test(input)) { // 获取>列表行，从 \\n> 开始 到 >\\n 结束，中间每行都以 > 开头 \\n 结束\r\n\t\tlet protoQuotTxt = RegExp.$1;\r\n\t\tlet quotTxt = protoQuotTxt.replace(NL_RT_ANGLE_GLOBAL_REGX, \"\\n\"); // 去掉每行开头的 >(&gt;)\r\n\t\tquotTxt = quotTxt.slice(1); // 去掉第一行的换行符\r\n\t\tlet indexNL = quotTxt.indexOf(\"\\n\");\r\n\r\n\t\tlet quotTtlLn = quotTxt.slice(0, indexNL);\r\n\t\tlet hasQuotTtl = String.startsWith(quotTtlLn, \"(\") && String.endsWith(quotTtlLn, \")\");\r\n\r\n\t\tlet legend = hasQuotTtl ? quotTtlLn.slice(1, quotTtlLn.length - 1) : STRING_QUOTE;\r\n\t\tlet outTxt = hasQuotTtl ? quotTxt.slice(indexNL + 1) : quotTxt;\r\n\r\n\t\toutTxt = replaceQuote(outTxt); // 递归查找看是否有多重引用\r\n\r\n\t\tinput = input.replace(MAIN_QUOT_REGX, `<fieldset><legend>${legend}</legend>${outTxt}</fieldset>`);\r\n\t}\r\n\r\n\treturn input;\r\n}\r\n\r\nvar replaceList = (function () {\r\n\r\n\tconst UL_REGEX = /(\\*+\\. (.)+\\n)+/,\r\n\t\tOL_1_REGEX = /([0-9]+\\. (.)+\\n)+/,\r\n\t\tOL_A_REGEX = /([a-z]+\\. (.)+\\n)+/,\r\n\t\tTYPE_1_LI_START = /[0-9]+\\. /g,\r\n\t\tTYPE_A_LI_START = /[a-z]+\\. /g,\r\n\t\tUL_LI_START = /\\*+\\. /g,\r\n\t\tLI_END = /\\n/g;\r\n\r\n\tconst LI_START_TAG = \"<li>\",\r\n\t\tLI_END_TAG = \"</li>\",\r\n\t\tUL_START_TAG = \"<ul>\",\r\n\t\tUL_END_TAG = \"</ul>\",\r\n\t\tOL_START_TYPE_1_TAG = '<ol class=\"list_type_1\">',\r\n\t\tOL_START_TYPE_A_TAG = '<ol class=\"list_type_a\">',\r\n\t\tOL_END_TAG = \"</ol>\";\r\n\r\n\tfunction replace(input, part, liStart, startTag, endTag) {\r\n\r\n\t\tvar output = part.replace(liStart, LI_START_TAG);\r\n\t\toutput = output.replace(LI_END, LI_END_TAG);\r\n\r\n\t\treturn input.replace(part, startTag + output + endTag);\r\n\t}\r\n\r\n\treturn function (input) {\r\n\r\n\t\t// ul\r\n\t\twhile ((matches = input.match(UL_REGEX)) !== null) {\r\n\t\t\tinput = replace(input, matches[0], UL_LI_START, UL_START_TAG, UL_END_TAG);\r\n\t\t}\r\n\t\t// ol -1\r\n\t\twhile ((matches = input.match(OL_1_REGEX)) !== null) {\r\n\t\t\tinput = replace(input, matches[0], TYPE_1_LI_START, OL_START_TYPE_1_TAG, OL_END_TAG);\r\n\t\t}\r\n\t\t// ol -a\r\n\t\twhile ((matches = input.match(OL_A_REGEX)) !== null) {\r\n\t\t\tinput = replace(input, matches[0], TYPE_A_LI_START, OL_START_TYPE_A_TAG, OL_END_TAG);\r\n\t\t}\r\n\r\n\t\treturn input;\r\n\t};\r\n})();\r\n\r\nconst COLOR_TAG_REGX = /\\[#([0-9,A-F]{6})\\|((.|\\s)*?)\\]/i;\r\nfunction replaceColor(input) {\r\n\twhile (COLOR_TAG_REGX.test(input)) {\r\n\t\tvar color = RegExp.$1,\r\n\t\t\tinner = RegExp.$2,\r\n\t\t\touts;\r\n\t\tvar splits = inner.split(\"|\");\r\n\t\tif (splits.length === 2) {\r\n\t\t\touts = '<span class=\"' + splits[0] + \"_\" + color + '\">' + splits[1] + '</span>';\r\n\t\t} else {\r\n\t\t\touts = '<span class=\"color_' + color + '\">' + splits[0] + '</span>';\r\n\t\t}\r\n\t\tinput = input.replace(\"[#\" + color + \"|\" + inner + \"]\", outs);\r\n\t}\r\n\treturn input;\r\n}\r\n\r\n/**\r\n * #(url|txt|title|target)\r\n *\r\n * @param {Object} input\r\n */\r\nconst LINK_TAG_REGX = /#\\(((.|\\s)*?)\\)/;\r\nfunction replaceLink(input) {\r\n\r\n\tlet links = [];\r\n\r\n\treturn {\r\n\t\tbefore: input => {\r\n\t\t\twhile (LINK_TAG_REGX.test(input)) {\r\n\t\t\t\tvar inner = RegExp.$1;\r\n\t\t\t\tvar splits = inner.split(\"|\");\r\n\t\t\t\tvar url = splits[0]\r\n\t\t\t\tvar outs = '<a href=\"' + url + '\"';\r\n\t\t\t\touts += ' title=\"' + (splits.length === 4 ? (splits[2] || url) : url) + '\"';\r\n\r\n\t\t\t\tvar target = splits[splits.length === 4 ? 3 : 2];\r\n\t\t\t\tif (target) {\r\n\t\t\t\t\touts += ' target=\"_' + target + '\"';\r\n\t\t\t\t}\r\n\t\t\t\touts += '>';\r\n\t\t\t\touts += splits[1] || url;\r\n\t\t\t\touts += '</a>';\r\n\t\t\t\touts = outs.replace(/<\\/?em>/g, \"/\");\r\n\r\n\t\t\t\tinput = input.replace(\"#(\" + inner + \")\", `{links~${links.length}}`);\r\n\t\t\t\tlinks.push(outs);\r\n\t\t\t}\r\n\t\t\treturn input;\r\n\t\t},\r\n\t\tafter: input => {\r\n\t\t\tArray.forEach(links, (i, e) => {\r\n\t\t\t\tinput = input.replace(`{links~${i}}`, e);\r\n\t\t\t})\r\n\t\t\treturn input;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n *  $(url|title|width|height)\r\n *\r\n * @param {Object} input\r\n */\r\nconst IMG_TAG_REGX = /\\$\\(((.|\\s)*?)\\)/;\r\nfunction replaceImage(input) {\r\n\r\n\tlet images = [];\r\n\r\n\treturn {\r\n\t\tbefore: input => {\r\n\t\t\twhile (IMG_TAG_REGX.test(input)) {\r\n\t\t\t\tvar inner = RegExp.$1;\r\n\t\t\t\tvar splits = inner.split(\"|\");\r\n\t\t\t\tvar str = splits[0].replace(/<\\/?(em)>/g, \"/\");\r\n\t\t\t\tstr = str.replace(/<\\/?(ins)>/g, \"_\");\r\n\t\t\t\tstr = str.replace(/<\\/?(del)>/g, \"-\");\r\n\t\t\t\tvar outs = '<img src=\"' + str + '\"';\r\n\t\t\t\touts += ' title=\"' + (splits[1] || str) + '\"';\r\n\r\n\t\t\t\tif (splits[2]) {\r\n\t\t\t\t\touts += ' width=\"' + splits[2] + '\"';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (splits[3]) {\r\n\t\t\t\t\touts += ' height=\"' + splits[3] + '\"';\r\n\t\t\t\t}\r\n\t\t\t\touts += ' onload=\"styles.Image.resize(this)\" onclick=\"styles.Image.protoSize(this)\" />';\r\n\r\n\t\t\t\tinput = input.replace(\"$(\" + inner + \")\", `{images~${images.length}}`);\r\n\t\t\t\timages.push(outs);\r\n\t\t\t}\r\n\t\t\treturn input;\r\n\t\t},\r\n\t\tafter: input => {\r\n\t\t\tArray.forEach(images, (i, e) => {\r\n\t\t\t\tinput = input.replace(`{images~${i}}`, e);\r\n\t\t\t})\r\n\t\t\treturn input;\r\n\t\t}\r\n\t};\r\n}\r\n\r\nconst TABLE_REGEX = /(\\|(.)+\\|\\n)+/,\r\n\tVERTICAL_BAR = /\\|/g;\r\nconst TR_JOIN = \"</tr><tr>\",\r\n\tTD_JOIN = \"</td><td>\",\r\n\tTD_START = \"<td>\",\r\n\tTD_END = \"</td>\",\r\n\tTABLE_START = '<table class=\"table\"><tr>',\r\n\tTABLE_END = '</tr></table>';\r\nfunction replaceTable(input) {\r\n\r\n\twhile ((matches = input.match(TABLE_REGEX)) !== null) {\r\n\t\tlet part = matches[0]\r\n\t\tlet output = [];\r\n\r\n\t\tArray.forEach(part.split(\"\\n\"), function (i, line) {\r\n\t\t\tif (i === 1) return;\r\n\t\t\tif (String.isEmpty(line)) return;\r\n\t\t\tline = line.slice(1, line.length - 1); // 去掉最开始和最后的 |\r\n\t\t\toutput.push(TD_START + line.replace(VERTICAL_BAR, TD_JOIN) + TD_END);\r\n\t\t});\r\n\r\n\t\tlet table = TABLE_START + output.join(TR_JOIN) + TABLE_END;\r\n\r\n\t\tinput = input.replace(part, table);\r\n\t}\r\n\r\n\treturn input;\r\n}\r\n\r\nconst ESCAPER_REGX = /\\\\\\//;\r\nfunction replaceEscapers() {\r\n\r\n\tlet escapes = [];\r\n\r\n\treturn {\r\n\t\tbefore: input => {\r\n\r\n\t\t\twhile ((matches = input.match(ESCAPER_REGX)) !== null) {\r\n\r\n\t\t\t\tlet part = matches[0];\r\n\t\t\t\tinput = input.replace(part, `{escape~${escapes.length}}`);\r\n\t\t\t\tescapes.push(part);\r\n\t\t\t}\r\n\r\n\t\t\treturn input;\r\n\t\t},\r\n\t\tafter: input => {\r\n\r\n\t\t\tArray.forEach(escapes, (i, e) => {\r\n\t\t\t\tinput = input.replace(`{escape~${i}}`, e);\r\n\t\t\t});\r\n\r\n\t\t\treturn input;\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction replaceAlign() {\r\n\r\n\tlet align = [];\r\n\r\n\treturn {\r\n\t\tbefore: input => {\r\n\r\n\t\t\twhile ((matches = input.match(CENTER_ALIGN_REGX)) !== null) {\r\n\r\n\t\t\t\tlet part = matches[0];\r\n\t\t\t\tlet str = part.replace(CENTER_ALIGN_REGX, CENTER_ALIGN_STR);\r\n\t\t\t\tinput = input.replace(part, `{align~${align.length}}`);\r\n\t\t\t\talign.push(str);\r\n\t\t\t}\r\n\r\n\t\t\twhile ((matches = input.match(LEFT_ALIGN_REGX)) !== null) {\r\n\r\n\t\t\t\tlet part = matches[0];\r\n\t\t\t\tlet str = part.replace(LEFT_ALIGN_REGX, LEFT_ALIGN_STR);\r\n\t\t\t\tinput = input.replace(part, `{align~${align.length}}`);\r\n\t\t\t\talign.push(str);\r\n\t\t\t}\r\n\r\n\t\t\twhile ((matches = input.match(RIGHT_ALIGN_REGX)) !== null) {\r\n\r\n\t\t\t\tlet part = matches[0];\r\n\t\t\t\tlet str = part.replace(RIGHT_ALIGN_REGX, RIGHT_ALIGN_STR);\r\n\t\t\t\tinput = input.replace(part, `{align~${align.length}}`);\r\n\t\t\t\talign.push(str);\r\n\t\t\t}\r\n\r\n\t\t\treturn input;\r\n\t\t},\r\n\t\tafter: input => {\r\n\r\n\t\t\tArray.forEach(align, (i, e) => {\r\n\t\t\t\tinput = input.replace(`{align~${i}}`, e);\r\n\t\t\t});\r\n\r\n\t\t\treturn input;\r\n\t\t}\r\n\t};\r\n}\r\n\r\nconst COMMENT_REGX = /\\/\\*((.|\\s)*?)\\*\\//g,\r\n\tITALIC_REGX = /\\/((.|\\s){1,})\\//g,\r\n\tBOLD_REGX = /!((.|\\s)*?)!/g,\r\n\tDEL_LINE_REGX = /-((.|\\s)*?)-/g,\r\n\tINS_LINE_REGX = /_((.|\\s)*?)_/g,\r\n\tCENTER_ALIGN_REGX = /\\n>>((.|\\s)+?)<<\\n/,\r\n\tLEFT_ALIGN_REGX = /\\n\\|\\:((.|\\s)+?)<<\\n/,\r\n\tRIGHT_ALIGN_REGX = /\\n>>((.|\\s)+?)\\:\\|\\n/,\r\n\tFONT_SIZE_REGX = /\\?\\(([1-9]([0-9]?)):((.|\\s)*?)\\)/,\r\n\tH6_REGX = /###### (.*?)(\\n|$)/g,\r\n\tH5_REGX = /##### (.*?)(\\n|$)/g,\r\n\tH4_REGX = /#### (.*?)(\\n|$)/g,\r\n\tH3_REGX = /### (.*?)(\\n|$)/g,\r\n\tH2_REGX = /## (.*?)(\\n|$)/g,\r\n\tH1_REGX = /# (.*?)(\\n|$)/g;\r\n\r\nconst ITALIC_STR = \"<em>$1</em>\",\r\n\tBOLD_STR = \"<strong>$1</strong>\",\r\n\tDEL_LINE_STR = \"<del>$1</del>\",\r\n\tINS_LINE_STR = \"<ins>$1</ins>\",\r\n\tCENTER_ALIGN_STR = '<div class=\"align_center\">$1</div>',\r\n\tLEFT_ALIGN_STR = '<div class=\"align_left\">$1</div>',\r\n\tRIGHT_ALIGN_STR = '<div class=\"align_right\">$1</div>',\r\n\tFONT_SIZE_STR = '<span class=\"size_$1\">$3</span>',\r\n\tH6_STR = \"<h1 class=\\\"h6\\\">$1</h1>\",\r\n\tH5_STR = \"<h1 class=\\\"h5\\\">$1</h1>\",\r\n\tH4_STR = \"<h1 class=\\\"h4\\\">$1</h1>\",\r\n\tH3_STR = \"<h1 class=\\\"h3\\\">$1</h1>\",\r\n\tH2_STR = \"<h1 class=\\\"h2\\\">$1</h1>\",\r\n\tH1_STR = \"<h1 class=\\\"h1\\\">$1</h1>\";\r\n\r\nmodule.exports = commons = __webpack_require__(/*! ../../commons */ \"./src/lib/commons.js\").create((input) => {\r\n\r\n\tinput = input.replace(COMMENT_REGX, String.BLANK); // 去掉注释\r\n\r\n\tlet link = replaceLink(); // 连接\r\n\tlet image = replaceImage(); // 图像\r\n\tlet align = replaceAlign(); // 对齐\r\n\tlet escape = replaceEscapers(); // 转义字符\r\n\r\n\tinput = link.before(input);\r\n\tinput = image.before(input);\r\n\tinput = escape.before(input);\r\n\tinput = align.before(input);\r\n\r\n\tinput = input.replace(ITALIC_REGX, ITALIC_STR); // 斜体字\r\n\tinput = input.replace(INS_LINE_REGX, INS_LINE_STR); // 下划线\r\n\r\n\tinput = align.after(input);\r\n\tinput = escape.after(input);\r\n\tinput = image.after(input);\r\n\tinput = link.after(input);\r\n\r\n\tinput = replaceQuote(input); // 引用\r\n\tinput = input.replace(BOLD_REGX, BOLD_STR); // 粗体字\r\n\tinput = input.replace(DEL_LINE_REGX, DEL_LINE_STR); // 删除线\r\n\tinput = replaceList(input); // 列表\r\n\tinput = replaceTable(input); // 表格\r\n\r\n\tinput = input.replace(FONT_SIZE_REGX, FONT_SIZE_STR); // 字号\r\n\r\n\tinput = replaceColor(input); // 颜色\r\n\r\n\tinput = input.replace(H6_REGX, H6_STR); // 六级标题\r\n\tinput = input.replace(H5_REGX, H5_STR); // 五级标题\r\n\tinput = input.replace(H4_REGX, H4_STR); // 四级标题\r\n\tinput = input.replace(H3_REGX, H3_STR); // 三级标题\r\n\tinput = input.replace(H2_REGX, H2_STR); // 二级标题\r\n\tinput = input.replace(H1_REGX, H1_STR); // 一级标题\r\n\r\n\t// 整个文本中，到处都有需要换行处理的地方，而且换行直接<br /> 更符合我自己的习惯，所以段落处理不再实现\r\n\t//input = replaceP(input); // 段落\r\n\r\n\treturn input;\r\n}, {\r\n\t\tobject : [\r\n\t\t\t{\r\n\t\t\t\tregexp: /\\[\\[((.|\\s)*?)\\]\\]/,\r\n\t\t\t\ttag: {\r\n\t\t\t\t\tstart: \"[[\",\r\n\t\t\t\t\tend: \"]]\",\r\n\t\t\t\t\thtml: \"pre\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tregexp: /{{((.|\\s)*?)}}/,\r\n\t\t\t\ttag: {\r\n\t\t\t\t\tstart: '{{',\r\n\t\t\t\t\tend: '}}',\r\n\t\t\t\t\thtml: 'ruby'\r\n\t\t\t\t},\r\n\t\t\t\treplace: {\r\n\t\t\t\t\tstart: {\r\n\t\t\t\t\t\tfrom: /\\(/g,\r\n\t\t\t\t\t\tto: \"<rp>(</rp><rt>\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\tend: {\r\n\t\t\t\t\t\tfrom: /\\)/g,\r\n\t\t\t\t\t\tto: \"</rt><rp>)</rp>\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\taspect: {\r\n\t\t\tsimpleLineCode: {\r\n\t\t\t\tregexp: /`([^`]+?)`/,\r\n\t\t\t\ttag: {\r\n\t\t\t\t\tstart: \"`\",\r\n\t\t\t\t\tend: \"`\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tescapeSequence: /\\\\(\\S)/\r\n\t\t}\r\n\t});\r\n\r\ncommons.clear = (str) => {\r\n\treturn str;\r\n};\n\n//# sourceURL=webpack:///./src/lib/HitOn/dist/0.0.1.js?");

/***/ }),

/***/ "./src/lib/HitOn/dist/plugin.js":
/*!**************************************!*\
  !*** ./src/lib/HitOn/dist/plugin.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\nlet highLighter = FlyHighLighter.execute;\r\n\r\nvar CodeRegExp = {\r\n\tregexp: /```(.*[\\r\\n]+)((.|\\s)*?)```/,\r\n\tcode: \"$2\",\r\n\tname: \"$1\"\r\n};\r\n\r\nfunction getCodeParser() {\r\n\r\n\tlet toCode = [];\r\n\r\n\treturn {\r\n\t\tbefore: function (str) {\r\n\r\n\t\t\twhile (CodeRegExp.regexp.test(str)) {\r\n\r\n\t\t\t\tvar codeWithLang;\r\n\r\n\t\t\t\tvar code = RegExp[CodeRegExp.code];\r\n\t\t\t\tvar name = RegExp[CodeRegExp.name];\r\n\r\n\t\t\t\tif (name) {\r\n\t\t\t\t\tcodeWithLang = \"```\" + name + code + \"```\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcodeWithLang = \"```\" + code + \"```\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstr = str.replace(codeWithLang, \"[toCode\" + toCode.length + \"]\");\r\n\t\t\t\tcode = highLighter(code, String.trim(name));\r\n\r\n\t\t\t\ttoCode.push(code);\r\n\t\t\t}\r\n\r\n\t\t\treturn str;\r\n\t\t},\r\n\t\tafter: function (str) {\r\n\t\t\tObject.forEach(toCode, function (i, obj) {\r\n\t\t\t\tstr = str.replace(\"[toCode\" + i + \"]\", obj);\r\n\t\t\t});\r\n\t\t\treturn str;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmodule.exports = () => [getCodeParser()];\n\n//# sourceURL=webpack:///./src/lib/HitOn/dist/plugin.js?");

/***/ }),

/***/ "./src/lib/HitOn/index.js":
/*!********************************!*\
  !*** ./src/lib/HitOn/index.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\r\nconst { AspectBase, parseEqualToObject, compireH5Video, compireH5Audio } = __webpack_require__(/*! ./../util */ \"./src/lib/util.js\");\r\nconst MAIN_QUOT_REGX = /\\n(\\n(>(.*)\\n)+)/,\r\n\tNL_RT_ANGLE_GLOBAL_REGX = /\\n>/g;\r\nconst STRING_QUOTE = \"引用\";\r\n\r\nfunction replaceQuote(input) {\r\n\r\n\twhile (MAIN_QUOT_REGX.test(input)) { // 获取>列表行，从 \\n> 开始 到 >\\n 结束，中间每行都以 > 开头 \\n 结束\r\n\t\tlet protoQuotTxt = RegExp.$1;\r\n\t\tlet quotTxt = protoQuotTxt.replace(NL_RT_ANGLE_GLOBAL_REGX, \"\\n\"); // 去掉每行开头的 >(&gt;)\r\n\t\tquotTxt = quotTxt.slice(1); // 去掉第一行的换行符\r\n\t\tlet indexNL = quotTxt.indexOf(\"\\n\");\r\n\r\n\t\tlet quotTtlLn = quotTxt.slice(0, indexNL);\r\n\t\tlet hasQuotTtl = String.startsWith(quotTtlLn, \"(\") && String.endsWith(quotTtlLn, \")\");\r\n\r\n\t\tlet legend = hasQuotTtl ? quotTtlLn.slice(1, quotTtlLn.length - 1) : STRING_QUOTE;\r\n\t\tlet outTxt = hasQuotTtl ? quotTxt.slice(indexNL + 1) : quotTxt;\r\n\r\n\t\toutTxt = replaceQuote(outTxt); // 递归查找看是否有多重引用\r\n\r\n\t\tinput = input.replace(MAIN_QUOT_REGX, `<fieldset><legend>${legend}</legend>${outTxt}</fieldset>`);\r\n\t}\r\n\r\n\treturn input;\r\n}\r\n\r\nconst replaceList = (function () {\r\n\r\n\tconst UL_REGEX = /(\\*+\\. (.)+\\n)+/,\r\n\t\tOL_1_REGEX = /([0-9]+\\. (.)+\\n)+/,\r\n\t\tOL_A_REGEX = /([a-z]+\\. (.)+\\n)+/,\r\n\t\tTYPE_1_LI_START = /[0-9]+\\. /g,\r\n\t\tTYPE_A_LI_START = /[a-z]+\\. /g,\r\n\t\tUL_LI_START = /\\*+\\. /g,\r\n\t\tLI_END = /\\n/g;\r\n\r\n\tconst LI_START_TAG = \"<li>\",\r\n\t\tLI_END_TAG = \"</li>\",\r\n\t\tUL_START_TAG = \"<ul>\",\r\n\t\tUL_END_TAG = \"</ul>\",\r\n\t\tOL_START_TYPE_1_TAG = '<ol class=\"list_type_1\">',\r\n\t\tOL_START_TYPE_A_TAG = '<ol class=\"list_type_a\">',\r\n\t\tOL_END_TAG = \"</ol>\";\r\n\r\n\tfunction replace(input, part, liStart, startTag, endTag) {\r\n\r\n\t\tvar output = part.replace(liStart, LI_START_TAG);\r\n\t\toutput = output.replace(LI_END, LI_END_TAG);\r\n\r\n\t\treturn input.replace(part, startTag + output + endTag);\r\n\t}\r\n\r\n\treturn function (input) {\r\n\r\n\t\t// ul\r\n\t\twhile ((matches = input.match(UL_REGEX)) !== null) {\r\n\t\t\tinput = replace(input, matches[0], UL_LI_START, UL_START_TAG, UL_END_TAG);\r\n\t\t}\r\n\t\t// ol -1\r\n\t\twhile ((matches = input.match(OL_1_REGEX)) !== null) {\r\n\t\t\tinput = replace(input, matches[0], TYPE_1_LI_START, OL_START_TYPE_1_TAG, OL_END_TAG);\r\n\t\t}\r\n\t\t// ol -a\r\n\t\twhile ((matches = input.match(OL_A_REGEX)) !== null) {\r\n\t\t\tinput = replace(input, matches[0], TYPE_A_LI_START, OL_START_TYPE_A_TAG, OL_END_TAG);\r\n\t\t}\r\n\r\n\t\treturn input;\r\n\t};\r\n})();\r\n\r\nconst COLOR_TAG_REGX = /\\[#([0-9,A-F]{6})\\|((.|\\s)*?)\\]/i;\r\nfunction replaceColor(input) {\r\n\twhile (COLOR_TAG_REGX.test(input)) {\r\n\t\tvar color = RegExp.$1,\r\n\t\t\tinner = RegExp.$2,\r\n\t\t\touts;\r\n\t\tvar splits = inner.split(\"|\");\r\n\t\tif (splits.length === 2) {\r\n\t\t\touts = '<span class=\"' + splits[0] + \"_\" + color + '\">' + splits[1] + '</span>';\r\n\t\t} else {\r\n\t\t\touts = '<span class=\"color_' + color + '\">' + splits[0] + '</span>';\r\n\t\t}\r\n\t\tinput = input.replace(\"[#\" + color + \"|\" + inner + \"]\", outs);\r\n\t}\r\n\treturn input;\r\n}\r\n\r\nconst LINK_REGX = /\\[(#|@|\\$|V|A)\\]\\(((.|\\s)*?)\\)/;\r\nfunction replaceSrcLinks() {\r\n\r\n\tlet links = AspectBase('links');\r\n\tlinks.before = input => {\r\n\t\twhile (LINK_REGX.test(input)) {\r\n\t\t\tlet tag = RegExp.$1;\r\n\t\t\tlet value = RegExp.$2;\r\n\r\n\t\t\tlet output = ReplaceHolder[tag](value);\r\n\r\n\t\t\tinput = links.replace(input, `[${tag}](${value})`, output);\r\n\t\t}\r\n\t\treturn input;\r\n\t};\r\n\r\n\treturn links;\r\n}\r\n\r\nconst ReplaceHolder = {\r\n\t'#': (input) => { // 链接 [#](url|txt|title|target)\r\n\r\n\t\tlet splits = input.split(\"|\");\r\n\t\tlet url = splits[0];\r\n\t\tlet txt = commonReplace(splits[1]) || url;\r\n\t\tlet title = (splits.length === 4 ? (splits[2] || url) : url);\r\n\t\tlet target = splits[splits.length === 4 ? 3 : 2];\r\n\r\n\t\tif (!target || target === 'new') { // 目标在新页面中打开，或者写 new 的时候也在新页面打开\r\n\t\t\ttarget = 'blank';\r\n\t\t}\r\n\r\n\t\treturn `<a href=\"${url}\" title=\"${title}\" target=\"_${target}\">${txt}</a>`;\r\n\t},\r\n\t\"@\": (input) => { // 邮件 [@](url|title)\r\n\t\tlet splits = input.split(\"|\");\r\n\t\tlet url = splits[0];\r\n\t\tlet title = splits[1] || url;\r\n\r\n\t\treturn `<a href=\"mailto:${url}\">${title}</a>`;\r\n\t},\r\n\t\"$\": (input) => { // 图像 [$](url|title|width|height)\r\n\r\n\t\tlet splits = input.split(\"|\");\r\n\r\n\t\tlet str = splits[0];\r\n\t\tlet title = splits[1] || str;\r\n\r\n\t\tlet outs = `<img src=\"${str}\" title=\"${title}\"`;\r\n\r\n\t\tif (splits[2]) {\r\n\t\t\touts += ' width=\"' + splits[2] + '\"';\r\n\t\t}\r\n\t\tif (splits[3]) {\r\n\t\t\touts += ' height=\"' + splits[3] + '\"';\r\n\t\t}\r\n\t\touts += ' onload=\"styles.Image.resize(this)\" onclick=\"styles.Image.protoSize(this)\" />';\r\n\r\n\t\treturn outs;\r\n\t},\r\n\t\"V\": (input) => { // 视频 [V](url)\r\n\r\n\t\tlet inputArr = input.split(\"|\");\r\n\t\tlet url = inputArr.shift();\r\n\t\tlet args = {};\r\n\r\n\t\tparseEqualToObject(inputArr, args);\r\n\r\n\t\treturn compireH5Video(url, args);\r\n\t},\r\n\t\"A\": (input) => { // 音频 [A](url)\r\n\t\treturn compireH5Audio(input);\r\n\t}\r\n};\r\n\r\nconst TABLE_REGEX = /(\\|(.)+\\|\\n)+/,\r\n\tVERTICAL_BAR = /\\|/g;\r\nconst TR_JOIN = \"</tr><tr>\",\r\n\tTD_JOIN = \"</td><td>\",\r\n\tTD_START = \"<td>\",\r\n\tTD_END = \"</td>\",\r\n\tTABLE_START = '<table class=\"table\"><tr>',\r\n\tTABLE_END = '</tr></table>';\r\nfunction replaceTable(input) {\r\n\r\n\twhile ((matches = input.match(TABLE_REGEX)) !== null) {\r\n\t\tlet part = matches[0]\r\n\t\tlet output = [];\r\n\r\n\t\tArray.forEach(part.split(\"\\n\"), function (i, line) {\r\n\t\t\tif (i === 1) return;\r\n\t\t\tif (String.isEmpty(line)) return;\r\n\t\t\tline = line.slice(1, line.length - 1); // 去掉最开始和最后的 |\r\n\t\t\toutput.push(TD_START + line.replace(VERTICAL_BAR, TD_JOIN) + TD_END);\r\n\t\t});\r\n\r\n\t\tlet table = TABLE_START + output.join(TR_JOIN) + TABLE_END;\r\n\r\n\t\tinput = input.replace(part, table);\r\n\t}\r\n\r\n\treturn input;\r\n}\r\n\r\nconst REFERENCE_REGX = /\\[\\^((\\S)+)?\\]/;\r\nfunction replaceReference(input) {\r\n\r\n\tlet tags = new Set(), index = 1;\r\n\r\n\twhile ((matches = input.match(REFERENCE_REGX)) !== null) {\r\n\r\n\t\tlet part = matches[0];\r\n\t\tlet tag = matches[1];\r\n\r\n\t\tif (!tags.has(part)) { // 没有出现过\r\n\t\t\ttags.add(part);\r\n\t\t\tlet html = `<sup id=\"f_${tag}\"><a href=\"#l_${tag}\">${tags.size}</a></sup> `;\r\n\t\t\tinput = input.replace(REFERENCE_REGX, html);\r\n\t\t} else { // 已经记载\r\n\t\t\tlet html = `<a id=\"l_${tag}\" href=\"#f_${tag}\">^</a> ${index}: `;\r\n\t\t\tinput = input.replace(REFERENCE_REGX, html);\r\n\t\t\tindex++;\r\n\t\t}\r\n\t}\r\n\r\n\treturn input;\r\n}\r\n\r\nconst ESCAPER_REGX = /\\\\\\//;\r\nfunction replaceEscapers() {\r\n\r\n\tlet escapes = AspectBase('escapes');\r\n\tescapes.before = input => {\r\n\t\twhile ((matches = input.match(ESCAPER_REGX)) !== null) {\r\n\t\t\tinput = escapes.replace(input, matches[0], part);\r\n\t\t}\r\n\r\n\t\treturn input;\r\n\t}\r\n\treturn escapes;\r\n}\r\n\r\nfunction replaceAlign() {\r\n\r\n\tlet align = AspectBase('align');\r\n\r\n\talign.before = input => {\r\n\t\twhile ((matches = input.match(CENTER_ALIGN_REGX)) !== null) {\r\n\r\n\t\t\tlet part = commonReplace(matches[0]);\r\n\t\t\tlet str = part.replace(CENTER_ALIGN_REGX, CENTER_ALIGN_STR);\r\n\t\t\tinput = align.replace(input, part, str);\r\n\t\t}\r\n\r\n\t\twhile ((matches = input.match(LEFT_ALIGN_REGX)) !== null) {\r\n\r\n\t\t\tlet part = commonReplace(matches[0]);\r\n\t\t\tlet str = part.replace(LEFT_ALIGN_REGX, LEFT_ALIGN_STR);\r\n\t\t\tinput = align.replace(input, part, str);\r\n\t\t}\r\n\r\n\t\twhile ((matches = input.match(RIGHT_ALIGN_REGX)) !== null) {\r\n\r\n\t\t\tlet part = commonReplace(matches[0]);\r\n\t\t\tlet str = part.replace(RIGHT_ALIGN_REGX, RIGHT_ALIGN_STR);\r\n\t\t\tinput = align.replace(input, part, str);\r\n\t\t}\r\n\r\n\t\treturn input;\r\n\t};\r\n\r\n\treturn align;\r\n}\r\n\r\nconst COMMENT_REGX = /\\/\\*((.|\\s)*?)\\*\\//g,\r\n\tITALIC_REGX = /\\/((.|\\s){1,})\\//g,\r\n\tBOLD_REGX = /!((.|\\s)*?)!/g,\r\n\tDEL_LINE_REGX = /-((.|\\s)*?)-/g,\r\n\tINS_LINE_REGX = /_((.|\\s)*?)_/g,\r\n\tCENTER_ALIGN_REGX = /\\n>>((.|\\s)+?)<<\\n/,\r\n\tLEFT_ALIGN_REGX = /\\n\\|\\:((.|\\s)+?)<<\\n/,\r\n\tRIGHT_ALIGN_REGX = /\\n>>((.|\\s)+?)\\:\\|\\n/,\r\n\tFONT_SIZE_REGX = /\\?\\(([1-9]([0-9]?)):((.|\\s)*?)\\)/,\r\n\tH6_REGX = /###### (.*?)(\\n|$)/g,\r\n\tH5_REGX = /##### (.*?)(\\n|$)/g,\r\n\tH4_REGX = /#### (.*?)(\\n|$)/g,\r\n\tH3_REGX = /### (.*?)(\\n|$)/g,\r\n\tH2_REGX = /## (.*?)(\\n|$)/g,\r\n\tH1_REGX = /# (.*?)(\\n|$)/g;\r\n\r\nconst ITALIC_STR = \"<em>$1</em>\",\r\n\tBOLD_STR = \"<strong>$1</strong>\",\r\n\tDEL_LINE_STR = \"<del>$1</del>\",\r\n\tINS_LINE_STR = \"<ins>$1</ins>\",\r\n\tCENTER_ALIGN_STR = '<div class=\"align_center\">$1</div>',\r\n\tLEFT_ALIGN_STR = '<div class=\"align_left\">$1</div>',\r\n\tRIGHT_ALIGN_STR = '<div class=\"align_right\">$1</div>',\r\n\tFONT_SIZE_STR = '<span class=\"size_$1\">$3</span>',\r\n\tH6_STR = \"<h1 class=\\\"h6\\\">$1</h1>\",\r\n\tH5_STR = \"<h1 class=\\\"h5\\\">$1</h1>\",\r\n\tH4_STR = \"<h1 class=\\\"h4\\\">$1</h1>\",\r\n\tH3_STR = \"<h1 class=\\\"h3\\\">$1</h1>\",\r\n\tH2_STR = \"<h1 class=\\\"h2\\\">$1</h1>\",\r\n\tH1_STR = \"<h1 class=\\\"h1\\\">$1</h1>\";\r\n\r\n/**\r\n * 这里的替换在任何位置都可以用到，比如：\r\n * 链接中的文字\r\n * 对齐的文字\r\n */\r\nfunction commonReplace(input) {\r\n\r\n\tif (!input) return input;\r\n\r\n\tinput = input.replace(ITALIC_REGX, ITALIC_STR); // 斜体字\r\n\tinput = input.replace(INS_LINE_REGX, INS_LINE_STR); // 下划线\r\n\tinput = input.replace(BOLD_REGX, BOLD_STR); // 粗体字\r\n\tinput = input.replace(DEL_LINE_REGX, DEL_LINE_STR); // 删除线\r\n\tinput = input.replace(FONT_SIZE_REGX, FONT_SIZE_STR); // 字号\r\n\tinput = replaceColor(input); // 颜色\r\n\r\n\treturn input;\r\n}\r\n\r\nconst commons = module.exports = __webpack_require__(/*! ./../commons */ \"./src/lib/commons.js\").create((input) => {\r\n\r\n\tinput = input.replace(COMMENT_REGX, String.BLANK); // 去掉注释\r\n\r\n\tlet link = replaceSrcLinks(); // 外部连接\r\n\tlet align = replaceAlign(); // 对齐\r\n\tlet escape = replaceEscapers(); // 转义字符\r\n\r\n\tinput = link.before(input);\r\n\tinput = escape.before(input);\r\n\tinput = align.before(input);\r\n\r\n\tinput = commonReplace(input); // 调用公共替换\r\n\r\n\tinput = replaceQuote(input); // 引用\r\n\tinput = replaceList(input); // 列表\r\n\tinput = replaceTable(input); // 表格\r\n\r\n\tinput = replaceReference(input); // 参考链接\r\n\r\n\tinput = input.replace(H6_REGX, H6_STR); // 六级标题\r\n\tinput = input.replace(H5_REGX, H5_STR); // 五级标题\r\n\tinput = input.replace(H4_REGX, H4_STR); // 四级标题\r\n\tinput = input.replace(H3_REGX, H3_STR); // 三级标题\r\n\tinput = input.replace(H2_REGX, H2_STR); // 二级标题\r\n\tinput = input.replace(H1_REGX, H1_STR); // 一级标题\r\n\r\n\tinput = align.after(input);\r\n\tinput = escape.after(input);\r\n\tinput = link.after(input);\r\n\r\n\t// 整个文本中，到处都有需要换行处理的地方，而且换行直接<br /> 更符合我自己的习惯，所以段落处理不再实现\r\n\t//input = replaceP(input); // 段落\r\n\r\n\treturn input;\r\n}, {\r\n\tobject: [\r\n\t\t// 引用\r\n\t\t{\r\n\t\t\tregexp: /\\[\\[((.|\\s)*?)\\]\\]/,\r\n\t\t\ttag: {\r\n\t\t\t\tstart: \"[[\",\r\n\t\t\t\tend: \"]]\",\r\n\t\t\t\thtml: \"pre\",\r\n\t\t\t\tattrs: {\r\n\t\t\t\t\t'class': 'pre'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t// 注音\r\n\t\t{\r\n\t\t\tregexp: /{{((.|\\s)*?)}}/,\r\n\t\t\ttag: {\r\n\t\t\t\tstart: '{{',\r\n\t\t\t\tend: '}}',\r\n\t\t\t\thtml: 'ruby'\r\n\t\t\t},\r\n\t\t\treplace: [\r\n\t\t\t\t{\r\n\t\t\t\t\tfrom: /\\(/g,\r\n\t\t\t\t\tto: \"<rp>(</rp><rt>\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfrom: /\\)/g,\r\n\t\t\t\t\tto: \"</rt><rp>)</rp>\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t],\r\n\taspect: {\r\n\t\tsimpleLineCode: {\r\n\t\t\tregexp: /`([^`]+?)`/,\r\n\t\t\ttag: {\r\n\t\t\t\tstart: \"`\",\r\n\t\t\t\tend: \"`\"\r\n\t\t\t}\r\n\t\t},\r\n\t\tescapeSequence: /\\\\(\\S)/\r\n\t}\r\n});\r\n\r\n/*\r\n * 目前不实现清除样式\r\n */\r\ncommons.clear = (str) => {\r\n\treturn str;\r\n};\n\n//# sourceURL=webpack:///./src/lib/HitOn/index.js?");

/***/ }),

/***/ "./src/lib/commons.js":
/*!****************************!*\
  !*** ./src/lib/commons.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\r\nconst { AspectBase, decodeHtmlTag } = __webpack_require__(/*! ./util */ \"./src/lib/util.js\");\r\n\r\nconst BR_TAG = \"<br />\";\r\nconst NL_REGX = /\\n/g;\r\nconst PRE_TAG = Coralian.constants.HtmlTag.PRE;\r\n\r\nfunction replaceObjects(str, arg) {\r\n\r\n\twhile ((matched = str.match(arg.regexp)) !== null) {\r\n\r\n\t\tlet htmlTag = arg.tag.html;\r\n\t\tlet attrs = util.compireObjectToXmlAtruibute(arg.tag.attrs);\r\n\t\tlet inner = matched[1];\r\n\t\tlet input = arg.tag.start + inner + arg.tag.end;\r\n\t\tif (htmlTag === PRE_TAG) {\r\n\t\t\tinner = inner.replace(\"<\", \"&lt;\"); // 所有预定义标签中的HTML标签都无效化处理\r\n\t\t\tinner = inner.replace(\">\", \"&gt;\");\r\n\t\t}\r\n\r\n\t\tif (arg.replace) { // 内部还有切换需求的时候进行处理\r\n\t\t\tArray.forEach(arg.replace, (i, item) => {\r\n\t\t\t\tinner = inner.replace(item.from, item.to);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tlet output = `<${htmlTag}${attrs}>${inner}</${htmlTag}>`;\r\n\r\n\t\tstr = str.replace(input, output);\r\n\t}\r\n\r\n\treturn str;\r\n}\r\n\r\nconst BUILT_IN_ASPECTS = {\r\n\tsimpleLineCode: (arg) => {\r\n\r\n\t\tlet lineCode = AspectBase('linecode');\r\n\t\tlineCode.before = input => {\r\n\t\t\twhile (arg.regexp.test(input)) {\r\n\t\t\t\tlet obj = RegExp.$1\r\n\t\t\t\tlet deHtmlObj = decodeHtmlTag(obj);// 去掉 HTML 结构\r\n\t\t\t\tlet part = arg.tag.start + obj + arg.tag.end;\r\n\t\t\t\tlet output = `<code class=\"code\">${deHtmlObj}</code>`;\r\n\t\t\t\tinput = lineCode.replace(input, part, output);\r\n\t\t\t}\r\n\t\t\treturn input;\r\n\t\t};\r\n\r\n\t\treturn lineCode;\r\n\t},\r\n\tescapeSequence: (arg) => {\r\n\r\n\t\tlet backSlash = AspectBase('backslash');\r\n\t\tbackSlash.before = input => {\r\n\t\t\twhile (arg.test(input)) {\r\n\t\t\t\tlet output = RegExp.$1;\r\n\t\t\t\tinput = backSlash.replace(input, arg, output);\r\n\t\t\t}\r\n\t\t\treturn input;\r\n\t\t};\r\n\r\n\t\treturn backSlash;\r\n\t}\r\n};\r\n\r\nmodule.exports = {\r\n\tcreate: (parse, arg) => {\r\n\r\n\t\tfunction replaceURI(str) {\r\n\r\n\t\t\ttry {\r\n\t\t\t\treturn decodeURIComponent(str);// 最后的转义出处理\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// 如果出错，就当不存在\r\n\t\t\t\treturn str;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\ttoHTML: (str, plugIns) => {\r\n\r\n\t\t\t\tlet { queue, aspect, object } = plugIns || {};\r\n\t\t\t\tlet aspects = [];\r\n\r\n\t\t\t\tif (aspect) { // 定制插片前处理\r\n\t\t\t\t\tArray.forEach(aspect, (i, a) => {\r\n\t\t\t\t\t\tlet aspect = a.method(a.object);\r\n\t\t\t\t\t\tstr = aspect.before(str);\r\n\t\t\t\t\t\taspects.push(aspect);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tif (arg.aspect) { // 内置插片前处理\r\n\t\t\t\t\tObject.forEach(arg.aspect, (n, o) => {\r\n\t\t\t\t\t\tlet aspect = BUILT_IN_ASPECTS[n](o);\r\n\t\t\t\t\t\tif (aspect) {\r\n\t\t\t\t\t\t\tstr = aspect.before(str);\r\n\t\t\t\t\t\t\taspects.push(aspect);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstr = parse(str);\r\n\r\n\t\t\t\tif (arg.object) { // 内置对象处理\r\n\t\t\t\t\tArray.forEach(arg.object, (i, o) => {\r\n\t\t\t\t\t\tstr = replaceObjects(str, o);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tif (object) { // 定制对象处理\r\n\t\t\t\t\tArray.forEach(object, (i, o) => {\r\n\t\t\t\t\t\tstr = replaceObjects(str, o);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 插片后处理\r\n\t\t\t\tArray.forEach(aspects, (i, a) => {\r\n\t\t\t\t\tstr = a.after(str);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (arg.queue) { // 内置队列处理\r\n\t\t\t\t\tArray.forEach(arg.queue, (i, obj) => {\r\n\t\t\t\t\t\tstr = obj(str);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tif (queue) { // 定制队列处理\r\n\t\t\t\t\tArray.forEach(queue, (i, obj) => {\r\n\t\t\t\t\t\tstr = obj(str);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstr = str.replace(NL_REGX, BR_TAG); // 单行换行\r\n\r\n\t\t\t\treturn replaceURI(str);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\n\n//# sourceURL=webpack:///./src/lib/commons.js?");

/***/ }),

/***/ "./src/lib/ubbcode.js":
/*!****************************!*\
  !*** ./src/lib/ubbcode.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("﻿\r\nconst EMPTY_STRING = String.BLANK;\r\nconst { compireH5Video, parseEqualToObject } = __webpack_require__(/*! ./util */ \"./src/lib/util.js\");\r\n\r\nconst replaceImg = (function () {\r\n\r\n\tconst IMG_ALIGN_REGX = /align=(left|center|right|justify)/,\r\n\t\tIMG_W_H_REGX = /(width|height)=(\\d+)/,\r\n\t\tIMG_SIZE_REGX = /size=\\((\\d+),(\\d+)\\)/;\r\n\r\n\tconst ONLOAD_ONCLICK_STR = ' onload=\"styles.Image.resize(this)\" onclick=\"styles.Image.protoSize(this)\" />';\r\n\r\n\t/*\r\n\t * img 标签属性，可以都不出现，或者都出现\r\n\t * 其中 size 和 width/height 不可以同时出现\r\n\t * +---------+------------------------------+\r\n\t * |align\t|(left|center|right|justify)   |\r\n\t * +---------+------------------------------+\r\n\t * |size\t |(width,height)\t\t\t\t|\r\n\t * +---------+------------------------------+\r\n\t * |width\t|value\t\t\t\t\t\t |\r\n\t * +---------+------------------------------+\r\n\t * |height   |value\t\t\t\t\t\t |\r\n\t * +---------+------------------------------+\r\n\t */\r\n\tfunction _replaceImg(input, output) {\r\n\r\n\t\tlet hasSize = false,\r\n\t\t\thasWidth_height = false;\r\n\r\n\t\tif ((matched = input.match(IMG_ALIGN_REGX)) !== null) {\r\n\t\t\toutput += ' class=\"flyimg img_' + matched[1] + '\"';\r\n\t\t}\r\n\r\n\t\tif ((matched = input.match(IMG_W_H_REGX)) !== null) {\r\n\t\t\thasSize = true;\r\n\t\t\toutput += ' ' + matched[1] + '=\"' + matched[2] + '\"';\r\n\t\t}\r\n\r\n\t\tif ((matched = input.match(IMG_SIZE_REGX)) !== null) {\r\n\t\t\thasWidth_height = false;\r\n\t\t\toutput += ' width=\"' + matched[1] + '\" height=\"' + matched[2] + '\"';\r\n\t\t}\r\n\r\n\t\tif (hasSize && hasWidth_height) {\r\n\t\t\tthrow new Error(\"不能同时指定 size 和 with 或 height。\");\r\n\t\t}\r\n\r\n\t\toutput += ONLOAD_ONCLICK_STR; // styles.Image 模块的定义直接交给前台自定义实现，FlyEditor 相当于只给一个接口而不具体负责实现\r\n\r\n\t\treturn output;\r\n\t}\r\n\r\n\tconst IMG_LINK_WITH_SRC_ATRR_REGX = /\\[img (align|size|width|height)=([^\\[]+)\\]([^\\[]+)\\[\\/img\\]/,\r\n\t\tIMG_LINK_WITH_ATRR_REGX = /\\[img=([^\\[]*) (align|size|width|height)=([^\\[]+)\\]([^\\[]+)\\[\\/img\\]/,\r\n\t\tIMG_LINK_WITH_SRC_REGX = /\\[img=([^\\[]*)\\](.+?)\\[\\/img\\]/g,\r\n\t\tIMG_LINK_WITH_NONE_REGX = /\\[img\\]([^\\[]*)\\[\\/img\\]/g;\r\n\r\n\tconst IMG_LINK_WITH_NONE_STR = '<img class=\\\"flyimg\\\" title=\"$1\" src=\"$1\" onload=\"styles.Image.resize(this)\" onclick=\"styles.Image.protoSize(this)\" />',\r\n\t\tIMG_LINK_WITH_SRC_STR = '<img class=\\\"flyimg\\\" src=\"$1\" title=\"$2\" onload=\"styles.Image.resize(this)\" onclick=\"styles.Image.protoSize(this)\" />';\r\n\r\n\treturn function (str) {\r\n\t\t/*\r\n\t\t * 可能组合1：img之后为空\r\n\t\t * [img align=value]src[/img]\r\n\t\t * [img size=(width,height)]src[/img]\r\n\t\t * [img width=value height=value]src[/img]\r\n\t\t * [img width=value]src[/img]\r\n\t\t * [img height=value]src[/img]\r\n\t\t * [img align=value size=(width,height)]src[/img]\r\n\t\t * [img align=value width=value height=value]src[/img]\r\n\t\t * [img align=value width=value]src[/img]\r\n\t\t * [img align=value height=value]src[/img]\r\n\t\t */\r\n\t\twhile ((matched = str.match(IMG_LINK_WITH_SRC_ATRR_REGX)) !== null) {\r\n\r\n\t\t\tlet input = \"[img \" + matched[1] + \"=\" + matched[2] + \"]\" + matched[3] + \"[/img]\";\r\n\t\t\tlet output = '<img src=\"' + matched[3] + '\"';\r\n\r\n\t\t\tstr = str.replace(input, _replaceImg(input, output));\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t * 可能组合2：img之后带src\r\n\t\t * [img=src align=value]title[/img]\r\n\t\t * [img=src size=(width,height)]title[/img]\r\n\t\t * [img=src width=value height=value]title[/img]\r\n\t\t * [img=src width=value]title[/img]\r\n\t\t * [img=src height=value]title[/img]\r\n\t\t * [img=src align=value size=(width,height)]title[/img]\r\n\t\t * [img=src align=value width=value height=value]title[/img]\r\n\t\t * [img=src align=value width=value]title[/img]\r\n\t\t * [img=src align=value height=value]title[/img]\r\n\t\t */\r\n\t\twhile ((matched = str.match(IMG_LINK_WITH_ATRR_REGX)) !== null) {\r\n\r\n\t\t\tlet input = \"[img=\" + matched[1] + \" \" + matched[2] + \"=\" + matched[3] + \"]\" + matched[4] + \"[/img]\";\r\n\t\t\tlet output = '<img src=\"' + matched[1] + '\" title=\"' + matched[4] + '\"';\r\n\r\n\t\t\tstr = str.replace(input, _replaceImg(input, output));\r\n\t\t}\r\n\r\n\t\t// 不带属性的两种写法\r\n\t\tstr = str.replace(IMG_LINK_WITH_NONE_REGX, IMG_LINK_WITH_NONE_STR); // [img]src[img]\r\n\t\tstr = str.replace(IMG_LINK_WITH_SRC_REGX, IMG_LINK_WITH_SRC_STR); // [img=src]title[img]\r\n\r\n\t\treturn str;\r\n\t};\r\n})();\r\n\r\nconst replaceList = function () {\r\n\r\n\tconst olTag = Coralian.constants.HtmlTag.OL;\r\n\tconst LINE_MARK = \"[*]\";\r\n\r\n\tfunction _replaceList(inner, tag) {\r\n\r\n\t\ttag = tag || Coralian.constants.HtmlTag.UL;\r\n\r\n\t\tif (String.isEmpty(inner)) return inner;\r\n\r\n\t\tinner = inner.split(LINE_MARK);\r\n\t\tinner.shift(); // 因为 split 之后，第一个 [*] 之前的空白也会被算作一行，所以这里直接去掉\r\n\r\n\t\tlet output = \"<\" + tag + \"><li>\" + inner.join(\"</li><li>\") + \"</li></\" + tag + \">\";\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n\tconst SIMLE_LIST_REGX = /\\[list\\]((.|\\s)*?)\\[\\/list\\]/,\r\n\t\tLIST_REGX = /\\[list=(a|A|1|\\*|#|o|i|I|α|一|あ|ア)( [^\\[]+)*\\]((.|\\s)*?)\\[\\/list\\]/;\r\n\r\n\tconst LIST_TYPE_STR = \"list_type_\";\r\n\r\n\treturn function (str) {\r\n\r\n\t\twhile ((matched = str.match(SIMLE_LIST_REGX)) !== null) {\r\n\t\t\tstr = str.replace(\"[list]\" + matched[1] + \"[/list]\", _replaceList(matched[1]));\r\n\t\t}\r\n\r\n\t\twhile ((matched = str.match(LIST_REGX)) !== null) {\r\n\r\n\t\t\tlet tag,\r\n\t\t\t\ttype = matched[1]\r\n\t\t\tparams = matched[2] || String.BLANK,\r\n\t\t\t\toutParam = EMPTY_STRING,\r\n\t\t\t\tinner = matched[3],\r\n\t\t\t\tclassName = LIST_TYPE_STR;\r\n\r\n\t\t\tif (!String.isEmpty(params)) {\r\n\t\t\t\tparams = params.split(\" \");\r\n\t\t\t\tif (params.length > 2) {\r\n\t\t\t\t\tthrow new Error(\"参数个数不正确\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i = 0; i < 2; i++) {\r\n\t\t\t\t\tif (params[i] === 'reversed') {\r\n\t\t\t\t\t\toutParam += \" reversed\";\r\n\t\t\t\t\t} else if (String.startsWith(params[i], \"start\")) {\r\n\t\t\t\t\t\toutParam += ' start=\"' + params[i].last() + '\"';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new Error(\"参数不正确\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase '#':\r\n\t\t\t\t\tclassName += \"square\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase '*':\r\n\t\t\t\t\tclassName += \"disc\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'o':\r\n\t\t\t\t\tclassName += \"circle\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'α':\r\n\t\t\t\t\tclassName += \"greek\";\r\n\t\t\t\t\ttag = olTag;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase '一':\r\n\t\t\t\t\tclassName += \"shuzi\";\r\n\t\t\t\t\ttag = olTag;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'あ':\r\n\t\t\t\t\tclassName += \"hira\";\r\n\t\t\t\t\ttag = olTag;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'ア':\r\n\t\t\t\t\tclassName += \"kata\";\r\n\t\t\t\t\ttag = olTag;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\ttag = olTag;\r\n\t\t\t\t\tclassName += type;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tstr = str.replace(\"[list=\" + type + params + \"]\" + inner + \"[/list]\", _replaceList(inner, tag));\r\n\r\n\t\t}\r\n\r\n\t\treturn str;\r\n\t};\r\n}();\r\n\r\nconst SIMPLE_URL_REGX = /\\[url]((.|\\s)*?)\\[\\/url\\]/g,\r\n\tURL_WITH_TARGET_REGX = /\\[url target=([^\\[]*)\\]((.|\\s)*?)\\[\\/url\\]/g,\r\n\tURL_WITH_LINK_TARGET_REGX = /\\[url=([^\\[]*) target=([^\\[]*)\\]((.|\\s)*?)\\[\\/url]/g,\r\n\tURL_WITH_LINK_REGX = /\\[url=([^\\[]*)\\]((.|\\s)*?)\\[\\/url\\]/g;\r\nconst SIMPLE_URL_STR = '<a href=\"$1\">$1</a>',\r\n\tURL_WITH_TARGET_STR = '<a href=\"$2\" title=\"$2\" target=\"_$1\">$2</a>',\r\n\tURL_WITH_LINK_TARGET_STR = '<a href=\"$1\" title=\"$1\" target=\"_$2\">$3</a>',\r\n\tURL_WITH_LINK_STR = '<a href=\"$1\" title=\"$2\">$2</a>';\r\n\r\nfunction replaceUrl(str) {\r\n\r\n\tstr = str.replace(SIMPLE_URL_REGX, SIMPLE_URL_STR); // [url]link[url]\r\n\tstr = str.replace(URL_WITH_TARGET_REGX, URL_WITH_TARGET_STR); // [url target=value]link[/url]\r\n\tstr = str.replace(URL_WITH_LINK_TARGET_REGX, URL_WITH_LINK_TARGET_STR);// [url=link target=value]title[/url]\r\n\tstr = str.replace(URL_WITH_LINK_REGX, URL_WITH_LINK_STR); // [url=link]title[url]\r\n\r\n\treturn str;\r\n}\r\n\r\nconst replaceH5Video = (function () {\r\n\r\n\tconst h5QUeryMap = {\r\n\t\tbilibili: function ({ url, page }) {\r\n\t\t\tpage = page || 1;\r\n\r\n\t\t\tlet src = 'https://www.bilibili.com/blackboard/player.html?aid=' + url.replace(\"av\", '');\r\n\t\t\t// let args = 'scrolling=\"no\" border=\"0\" framespacing=\"0\"';\r\n\t\t\tlet args = {\r\n\t\t\t\tscrolling: 'no',\r\n\t\t\t\tborder: 0,\r\n\t\t\t\tframespacing: 0\r\n\t\t\t};\r\n\r\n\t\t\treturn compireH5Video(url, args);\r\n\t\t},\r\n\t\tyouku: function ({ url }) {\r\n\t\t\tlet src = `http://player.youku.com/embed/${url}`;\r\n\r\n\t\t\treturn compireH5Video(src);\r\n\t\t},\r\n\t\tcommon: (url, args) => {\r\n\t\t\treturn compireH5Video(url, args);\r\n\t\t}\r\n\t};\r\n\tconst REGEX_H5VIDEO_ARGS = /\\[video=([^\\]]+)\\]([^\\]]+)\\[\\/video\\]/, H5_FORMAT_ARGS = \"[video=%1]%2[/video]\", NAME_REGX = /(([^\\]]+))*\\(([^\\]]+)\\)/;\r\n\tconst REGEX_H5VIDEO = /\\[video\\]([^\\]]+)\\[\\/video\\]/, H5_FORMAT = \"[video]%2[/video]\";\r\n\r\n\tfunction __replace(str, input, title, name, url, args) {\r\n\r\n\t\tlet h5Query = name ? (h5QUeryMap[name] || h5QUeryMap.common) : h5QUeryMap.common;\r\n\t\tlet output = h5Query(url, args);\r\n\r\n\t\tinput = input.replace(\"%1\", title);\r\n\t\tinput = input.replace(\"%2\", url);\r\n\r\n\t\treturn str.replace(input, output);\r\n\t}\r\n\r\n\treturn function (str) {\r\n\r\n\t\tif (arguments.length === 1) {\r\n\r\n\t\t\twhile ((matched = str.match(REGEX_H5VIDEO)) !== null) {\r\n\t\t\t\tstr = __replace(str, H5_FORMAT, null, null, matched[1]);\r\n\t\t\t}\r\n\r\n\t\t\twhile ((matched = str.match(REGEX_H5VIDEO_ARGS)) !== null) {\r\n\t\t\t\tlet title = name = matched[1];\r\n\t\t\t\tlet value = matched[2].split(\",\");\r\n\t\t\t\tlet url = value[0];\r\n\t\t\t\tlet page = value[1] || '';\r\n\r\n\t\t\t\tlet args = {};\r\n\t\t\t\tif (page) {\r\n\t\t\t\t\targs.page = page;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet argMarch = title.match(NAME_REGX);\r\n\t\t\t\tif (argMarch !== null) {\r\n\t\t\t\t\tname = argMarch[1];\r\n\t\t\t\t\tparseEqualToObject(argMarch[3].split(\",\"), args);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstr = __replace(str, H5_FORMAT_ARGS, title, name, url, args);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// 这里是留给原FLASH格式的接口\r\n\t\t\tstr = __replace(str, arguments[1], arguments[2], arguments[3], arguments[4] || '');\r\n\r\n\t\t}\r\n\t\treturn str;\r\n\t}\r\n})();\r\n\r\nconst BILIBILI_FLASH_REGEX = /\\[flash=bilibili]([^\\[]+)\\.swf\\?aid=([^\\[]+)\\[\\/flash]/;\r\nconst NORMAL_FLASH_REGEX = /\\[flash]([^\\[]+)\\[\\/flash]/;\r\nconst NORMAL_FLASH_STR = '<embed src=\"$1\" allowFullScreen=\"true\" name=\"movie\" value=\"opaque\" width=\"634\" height=\"440\" type=\"application/x-shockwave-flash\" />';\r\nconst YOUKU_STR = 'youku';\r\nconst BILIBILI_STR = 'bilibili';\r\n\r\nfunction replaceFlash(str) {\r\n\r\n\t// 将 B 站的FLASH全部替换为H5播放器\r\n\twhile ((matched = str.match(BILIBILI_FLASH_REGEX)) !== null) {\r\n\t\tlet url = matched[1];\r\n\t\tlet values = matched[2];\r\n\t\tlet valArr = values.split(\"&amp;page=\");\r\n\t\tlet input = \"[flash=bilibili]\" + url + \".swf?aid=\" + values + \"[/flash]\";\r\n\t\tstr = replaceH5Video(str, input, BILIBILI_STR, valArr[0], valArr[1]);\r\n\t}\r\n\r\n\twhile ((matched = str.match(NORMAL_FLASH_REGEX)) !== null) {\r\n\t\tlet url = matched[1];\r\n\t\tlet input = `[flash]${url}[/flash]`;\r\n\t\tif (String.contains(url, YOUKU_STR)) { // 优酷\r\n\t\t\tlet urls = url.split(\"/\");\r\n\t\t\tstr = replaceH5Video(str, input, YOUKU_STR, urls[urls.length - 2]);\r\n\t\t} else { // 其他，暂时保留 FLASH\r\n\t\t\tstr = str.replace(NORMAL_FLASH_REGEX, NORMAL_FLASH_STR);\r\n\t\t}\r\n\t}\r\n\r\n\treturn str;\r\n}\r\n\r\nconst TD_TR_REGX = /\\[(tr|td) ([^\\[]+)=([^\\[]+)\\]/g,\r\n\tTABLG_REGX = /\\[table ([^\\[]+)=([^\\[]+)\\]/g,\r\n\tSIMPLE_TABLG_REGX = /\\[table\\]/g,\r\n\tTABLE_END_REGX = /\\[\\/table\\]/g;\r\nconst TD_TR_STR = '<$1 $2=\"$3\">',\r\n\tTABLG_STR = '<table $1=\"$2\" class=\"table\">',\r\n\tSIMPLE_TABLG_STR = '<table class=\"table\">',\r\n\tTABLE_END_STR = '</table>';\r\n\r\nfunction replaceTable(str) {\r\n\r\n\tstr = str.replace(TD_TR_REGX, TD_TR_STR);\r\n\tstr = str.replace(TABLG_REGX, SIMPLE_TABLG_STR);\r\n\tstr = str.replace(SIMPLE_TABLG_REGX, SIMPLE_TABLG_STR);\r\n\tstr = str.replace(TABLE_END_REGX, TABLE_END_STR);\r\n\r\n\treturn str;\r\n}\r\n\r\nconst BLOCK_REGX = /\\[(\\/)?(quote|p|table|td|tr|list|align)\\]\\n\\[(\\/)?(quote|p|table|td|tr|list|align)/,\r\n\tSIMPLE_SPAN_TAG_ENDS_REGX = /\\[\\/(size|color|font|bgcolor)\\]/g,\r\n\tSPAN_TAG_ENDS_REGX = /\\[(\\/)?(sub|sup|del|p|tr|td|mark)]/g,\r\n\tH1_H6_REGX = /\\[(\\/)?h([1-6])]/g,\r\n\tFONT_SIZE_REGX = /\\[size=(\\d+?)]/g,\r\n\tBGCOLOR_REGX = /\\[(bg|)color=\\#([^\\[\\<]+?)]/g,\r\n\tALIGN_REGX = /\\[align=(left|center|right|justify)\\]((.|\\s)*?)\\[\\/align\\]/g,\r\n\tINS_LINE_REGX = /\\[u\\](.+?)\\[\\/u]/g,\r\n\tSIMPLE_QUOTE_REGX = /\\[quote\\]/g,\r\n\tQUOTE_REGX = /\\[quote=([^\\]]+)\\]/g,\r\n\tFIELDSET_END_REGX = /\\[\\/(quote|thunder|magnet)\\]/g,\r\n\tTHUNER_LINK_REGX = /\\[thunder=([^\\]]+)\\]([^\\[]+)/g,\r\n\tMSGNET_LINK_REGX = /\\[magnet=([^\\]]+)\\]([^\\[]+)/g\r\nOLD_BOLD_REGX = /\\[b(old)?\\](.+?)\\[\\/b(old)?]/g,\r\n\tOLD_ITALIC_REGX = /\\[i(talic)?\\](.+?)\\[\\/i(talic)?]/g,\r\n\tTAIL_EXE_REGX_1 = /\\<(\\/)?(div|fieldset|tr|pre|table|p|h[1-6]|pre|li|ul|ol)\\>\\<br( \\/)?\\>/g,\r\n\tTAIL_EXE_REGX_2 = /\\<br( \\/)?\\>\\<(\\/)?(div|fieldset|tr|table|p|h[1-6]|pre|li|ul|ol)/g;\r\n\r\nconst BLOCK_OUT_STR = \"[$1$2][$3$4\",\r\n\tSIMPLE_SPAN_TAG_ENDS_STR = '</span>',\r\n\tSPAN_TAG_ENDS_STR = '<$1$2>',\r\n\tH1_H6_STR = '<$1h$2 class=\"$1h$2\">',\r\n\tFONT_SIZE_STR = '<span class=\"size_$1\">',\r\n\tBGCOLOR_STR = '<span class=\"$1color_$2\">',\r\n\tALIGN_STR = '<div class=\"align_$1\">$2</div>',\r\n\tINS_LINE_STR = '<ins>$1</ins>',\r\n\tSIMPLE_QUOTE_STR = '<fieldset class=\"fieldset\"><legend>引用</legend><div>',\r\n\tQUOTE_STR = '<fieldset class=\"fieldset\"><legend>$1</legend><div>',\r\n\tFIELDSET_END_STR = '</div></fieldset>',\r\n\tTHUNER_LINK_STR = '<fieldset class=\"fieldset\"><legend>迅雷资源</legend><div><a href=\"$1\" title=\"$2\">$2</a>',\r\n\tMSGNET_LINK_STR = '<fieldset class=\"fieldset\"><legend>磁力链接</legend><div><a href=\"$1\" title=\"$2\">$2</a>',\r\n\tOLD_BOLD_STR = '<strong>$2</strong>',\r\n\tOLD_ITALIC_STR = '<em>$2</em>',\r\n\tTAIL_EXE_STR1_1 = \"<$1$2>\",\r\n\tTAIL_EXE_STR1_2 = \"<$2$3\",\r\n\tFONT_REGX_FORMAT_STR = \"\\\\[font=%s\\\\]\";\r\n\r\nconst commons = module.exports = __webpack_require__(/*! ./commons */ \"./src/lib/commons.js\").create((str) => {\r\n\r\n\t// 在把 \\n 替换为 <br /> 之前把包括 quote 等在内的块层级之间的换行符给去掉\r\n\tstr = str.replace(BLOCK_REGX, BLOCK_OUT_STR);\r\n\r\n\tstr = replaceFlash(str);\r\n\tstr = replaceH5Video(str);\r\n\r\n\tstr = str.replace(SIMPLE_SPAN_TAG_ENDS_REGX, SIMPLE_SPAN_TAG_ENDS_STR);\r\n\tstr = str.replace(SPAN_TAG_ENDS_REGX, SPAN_TAG_ENDS_STR);\r\n\tstr = str.replace(H1_H6_REGX, H1_H6_STR);\r\n\tstr = str.replace(FONT_SIZE_REGX, FONT_SIZE_STR);\r\n\tstr = str.replace(BGCOLOR_REGX, BGCOLOR_STR);\r\n\r\n\tstr = replaceTable(str);\r\n\r\n\tstr = str.replace(ALIGN_REGX, ALIGN_STR);\r\n\tstr = str.replace(INS_LINE_REGX, INS_LINE_STR);\r\n\r\n\tstr = replaceList(str);\r\n\tstr = replaceImg(str);\r\n\tstr = replaceUrl(str);\r\n\r\n\tstr = str.replace(SIMPLE_QUOTE_REGX, SIMPLE_QUOTE_STR);\r\n\tstr = str.replace(QUOTE_REGX, QUOTE_STR);\r\n\tstr = str.replace(FIELDSET_END_REGX, FIELDSET_END_STR);\r\n\tstr = str.replace(THUNER_LINK_REGX, THUNER_LINK_STR);\r\n\tstr = str.replace(MSGNET_LINK_REGX, MSGNET_LINK_STR);\r\n\r\n\t// 系统先保留这种写法\r\n\tstr = str.replace(OLD_BOLD_REGX, OLD_BOLD_STR);\r\n\tstr = str.replace(OLD_ITALIC_REGX, OLD_ITALIC_STR);\r\n\r\n\t// 这些处理是为了防止清理的不干净做的尾处理\r\n\tstr = str.replace(TAIL_EXE_REGX_1, TAIL_EXE_STR1_1); // 去掉标签后的多余换行比如<table><br />\r\n\tstr = str.replace(TAIL_EXE_REGX_2, TAIL_EXE_STR1_2); // 去掉标签后的多余换行比如<br /><table>;\r\n\r\n\treturn str;\r\n}, {\r\n\tobject: [\r\n\t\t{\r\n\t\t\tregexp: /\\[pre\\]((.|\\s)*?)\\[\\/pre\\]/,\r\n\t\t\ttag: {\r\n\t\t\t\tstart: \"[pre]\",\r\n\t\t\t\tend: \"[/pre]\",\r\n\t\t\t\thtml: \"pre\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tregexp: /\\[phonics\\]((.|\\s)*?)\\[\\/phonics\\]/,\r\n\t\t\ttag: {\r\n\t\t\t\tstart: '[phonics]',\r\n\t\t\t\tend: '[/phonics]',\r\n\t\t\t\thtml: 'ruby'\r\n\t\t\t},\r\n\t\t\treplace: [\r\n\t\t\t\t{\r\n\t\t\t\t\tfrom: /\\(/g,\r\n\t\t\t\t\tto: \"<rp>(</rp><rt>\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tfrom: /\\)/g,\r\n\t\t\t\t\tto: \"</rt><rp>)</rp>\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t],\r\n\taspect: {\r\n\t\tsimpleLineCode: {\r\n\t\t\tregexp: /\\[code\\]((.)*?)\\[\\/code\\]/,\r\n\t\t\ttag: {\r\n\t\t\t\tstart: \"[code]\",\r\n\t\t\t\tend: \"[/code]\"\r\n\t\t\t}\r\n\t\t},\r\n\t}\r\n});\r\n\r\ncommons.clear = (str) => {\r\n\tstr = str.replace(/\\[\\/(size|color|font|backcolor)\\]/g, EMPTY_STRING);\r\n\tstr = str.replace(/\\[(\\/)?(sub|flash|sup|underline|i|p|del|b|quote|tucao|magnet|ed2k|thunder)\\]/g, EMPTY_STRING);\r\n\tstr = str.replace(/\\[\\/align\\]/g, EMPTY_STRING);\r\n\tstr = str.replace(/\\[(\\/)?h([1-6])\\]/g, EMPTY_STRING);\r\n\tstr = str.replace(/\\[align=(left|center|right|justify)\\]/g, EMPTY_STRING);\r\n\tstr = str.replace(/\\[size=(\\d+?)\\]/g, EMPTY_STRING);\r\n\tstr = str.replace(/\\[(color|bgcolor)=\\#([^\\[\\<]+?)\\]/g, EMPTY_STRING);\r\n\tstr = str.replace(/\\[font=([^\\[\\<]+?)\\]/g, EMPTY_STRING);\r\n\tstr = str.replace(/\\[list=(a|A|1)\\](.+?)\\[\\/list\\]/g, '$2');\r\n\tstr = str.replace(/\\[(\\/)?list\\]/g, EMPTY_STRING);\r\n\tstr = str.replace(/\\[img(\\((left|center|right|justify)\\)|)\\]([^\\[]*)\\[\\/img\\]/g, '$1');\r\n\tstr = str.replace(/\\[url([^\\[]*)\\]([^\\[]+)\\[\\/url\\]/g, '$2');\r\n\r\n\treturn str;\r\n};\n\n//# sourceURL=webpack:///./src/lib/ubbcode.js?");

/***/ }),

/***/ "./src/lib/util.js":
/*!*************************!*\
  !*** ./src/lib/util.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\r\nexports.compireH5Video = (input, args) => {\r\n\r\n\treturn compireH5Object(input, args, 'iframe', 'h5video');\r\n};\r\n\r\nexports.compireH5Audio = (input, args) => {\r\n\treturn input;\r\n}\r\n\r\nfunction compireH5Object(input, args, tag, className) {\r\n\r\n\tlet result = compireObjectToXmlAtruibute(args);\r\n\r\n\treturn `<${tag} class=\"${className}\" src=\"${input}\" ${result}></${tag}>`;\r\n}\r\n\r\nexports.parseEqualToObject = (input, obj) => {\r\n\tfor (let item of input) {\r\n\t\tlet kv = item.split(\"=\");\r\n\t\tobj[kv[0]] = kv[1];\r\n\t}\r\n};\r\n\r\nfunction compireObjectToXmlAtruibute(input) {\r\n\r\n\tlet str = String.BLANK;\r\n\r\n\tfor (let k in input) {\r\n\t\tlet v = input[k];\r\n\t\tstr += ` ${k}=\"${v}\"`;\r\n\t}\r\n\r\n\treturn str;\r\n}\r\n\r\nexports.compireObjectToXmlAtruibute = compireObjectToXmlAtruibute;\r\n\r\n/*\r\n * 这是插片（aspbect）的基类，有三个方法组成，\r\n * 1. before 抽象方法。前处理，因为每种插片的逻辑都不一致，所以需要每个子类自行实现\r\n * 2. replace 插片内容的替换方法，不需要子类重写\r\n * 3. after 后处理，将所有插片内容还原为 html 可显示内容\r\n */\r\nexports.AspectBase = (key) => {\r\n\r\n\tlet array = [];\r\n\r\n\treturn {\r\n\t\t// before 方法需要每个子类自行实现\r\n\t\treplace: (input, part, str) => {\r\n\r\n\t\t\tinput = input.replace(part, `{${key}~${array.length}}`);\r\n\t\t\tarray.push(str);\r\n\r\n\t\t\treturn input;\r\n\t\t},\r\n\t\tafter: (input) => {\r\n\t\t\tArray.forEach(array, (i, e) => {\r\n\t\t\t\tinput = input.replace(`{${key}~${i}}`, e);\r\n\t\t\t});\r\n\r\n\t\t\treturn input;\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexports.decodeHtmlTag = (str) => {\r\n\r\n\tstr = str.replace(/</g, \"&lt;\");\r\n\tstr = str.replace(/>/g, \"&gt;\");\r\n\r\n\treturn str;\r\n};\n\n//# sourceURL=webpack:///./src/lib/util.js?");

/***/ })

/******/ });